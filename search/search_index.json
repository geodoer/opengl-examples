{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"1LearnChernoOpenGL/","title":"Index","text":"<p>Cherno OpenGL\u8bfe\u7a0b\u5b66\u4e60\u7b14\u8bb0\u3002</p>"},{"location":"1LearnChernoOpenGL/#_1","title":"\u8bfe\u7a0b\u5185\u5bb9","text":"<ol> <li>OpenGL\u63a5\u53e3\u7684\u8bb2\u89e3\u4e0e\u4f7f\u7528</li> </ol>"},{"location":"1LearnChernoOpenGL/#_2","title":"\u8bfe\u7a0b\u8bc4\u4ef7","text":"<ol> <li>\u8bb2\u89e3\u7684\u5f88\u7ec6\u81f4\uff0c\u6df1\u5165\u6d45\u51fa\u3002\u4e00\u5c42\u4e00\u5c42\u53bb\u8bb2\uff0c\u8ba9\u8bfb\u8005\u77e5\u9053\u67d0\u4e9b\u6982\u5ff5\u5177\u4f53\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u800c\u6bcf\u4e00\u5c42\u4e3e\u7684\u53c8\u662f\u6700\u5c0f\u6848\u4f8b</li> <li>\u5199\u4ee3\u7801\u524d\uff0c\u4f1a\u8bb2\u539f\u7406</li> <li>\u5199\u4ee3\u7801\u65f6\uff0c\u4f1a\u5e26\u8bfb\u8005\u53bb\u5199\uff0c\u5e76\u523b\u610f\u4f1a\u72af\u4e00\u4e9b\u9519\u8bef\uff0c\u518d\u8bb2\u89e3\u539f\u56e0\u5e76\u89e3\u51b3</li> <li>\u5199\u4ee3\u7801\u65f6\uff0c\u4f1a\u4ece0\u5f00\u59cb\uff0c\u7136\u540e\u4e0d\u65ad\u8fed\u4ee3\u62bd\u8c61\uff0c\u8fb9\u5199\u8fb9\u5e26\u89c2\u4f17\u601d\u8003</li> </ol>"},{"location":"1LearnChernoOpenGL/#_3","title":"\u8bfe\u7a0b\u94fe\u63a5","text":"<p>\u8bfe\u7a0b\u89c6\u9891\uff1a\u3010\u8bd1\u3011TheCherno-OpenGL\u7cfb\u5217\u6559\u7a0b_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>\u76f8\u5173\u94fe\u63a5</p> <ol> <li>\u4f5c\u8005cherno\u7684\u7f51\u7ad9</li> <li>\u8bd1\u8005\u7684\u4ee3\u7801GITHUB: Github\u5730\u5740\uff1bGITEE</li> <li>OpenGL\u7684\u6587\u6863\uff1adocs.gl</li> </ol>"},{"location":"1LearnChernoOpenGL/#_4","title":"\u5de5\u7a0b\u8bf4\u660e","text":"\u5b50\u5de5\u7a0b \u5bf9\u5e94\u8bfe\u7a0b \u8bf4\u660e 13UseImgui P22 \u4f7f\u7528ImGUI\uff1b\u6dfb\u52a0\u63a7\u5236transform\u7684\u6309\u94ae 14DoubleDraw P23 \u6279\u91cf\u6e32\u67d3\u3002\u4e00\u5e27\u4e2d\uff0c\u6539\u53d8\u504f\u79fb\u77e9\u9635\uff0c\u591a\u6b21\u7ed8\u5236\u7269\u4f53 15TestProject P24, P25 1. \u6d4b\u8bd5\u6846\u67b6\uff1a\u521b\u5efa\u4e00\u4e2a\u62bd\u8c61\u7684\u6d4b\u8bd5\u7c7b\u4e0e\u83dc\u53552. \u5e76\u6dfb\u52a0\u201c\u6e05\u9664\u989c\u8272\u6d4b\u8bd5\u201d"},{"location":"1LearnChernoOpenGL/01%20Hi%2C%20OpenGL/","title":"01 Hi, OpenGL","text":""},{"location":"1LearnChernoOpenGL/01%20Hi%2C%20OpenGL/#opengl","title":"OpenGL\u662f\u4ec0\u4e48","text":"<p>OpenGL\u4e0d\u662f\u4e00\u4e2a\u7c7b\u5e93\uff0c\u4e5f\u4e0d\u662f\u4e00\u4e2a\u5f15\u64ce\uff0c\u4e0d\u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u975e\u5f00\u6e90 OpenGL\u53ea\u662f\u4e00\u4e2a\u89c4\u8303\uff0c\u548cC++\u89c4\u8303\u5dee\u4e0d\u591a</p> <ul> <li>\u5b83\u53ea\u662f\u63d0\u4f9b\u4e00\u4e9b\u89c4\u8303\u3002\u5b83\u89c4\u5b9a\u4e86OpenGL\u5305\u542b\u4e86\u54ea\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5e94\u8be5\u5b58\u5728\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u8fd9\u4e9b\u53c2\u6570\u5e76\u4e14\u8fd4\u56de\u8fd9\u4e2a\u503c</li> <li>\u5b83\u6ca1\u6709\u63d0\u4f9b\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u662f\u7531GPU\u5236\u9020\u5546\u5b9e\u73b0\u3002\u5047\u8bbe\u4f60\u4f7f\u7528\u7684\u662fNVIDIA\u7684\u663e\u5361\uff0c\u90a3\u4e48OpenGL\u6240\u5b9a\u4e49\u7684\u51fd\u6570\u7531\u82f1\u4f1f\u8fbe\u5199\u5728NVIDIA\u7684\u663e\u5361\u9a71\u52a8\u91cc</li> <li>\u6bcf\u4e2a\u663e\u5361\u5236\u9020\u5546\uff08\u6bd4\u5982AMD\u3001Intel\u7b49\uff09\u90fd\u4f1a\u6709OpenGL\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u800c\u4e14\u4ee3\u7801\u90fd\u4e0d\u540c\uff0c\u56e0\u6b64OpenGL\u4e0d\u662f\u5f00\u6e90\u7684\uff0cGPU\u5236\u9020\u5546\u4e0d\u4f1a\u5f00\u6e90\u8fd9\u4e9b\u4ee3\u7801</li> </ul>"},{"location":"1LearnChernoOpenGL/01%20Hi%2C%20OpenGL/#_1","title":"\u521b\u5efa\u7a97\u53e3\u548c\u4e0a\u4e0b\u6587","text":"<p>\u5728\u4f7f\u7528OpenGL\u7ed8\u56fe\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7a97\u53e3\u548cOpenGL\u4e0a\u4e0b\u6587\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636eWindows API\u81ea\u884c\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f46\u8fd9\u5f88\u9ebb\u70e6\uff0c\u800c\u4e14\u5199\u7684\u4ee3\u7801\u4e5f\u4e0d\u80fd\u8de8\u5e73\u53f0\u3002\u5e02\u9762\u4e0a\u6709\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5e93\u80fd\u591f\u5e2e\u6211\u4eec\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5e76\u4e14\u5199\u7684\u4ee3\u7801\u4e5f\u80fd\u8de8\u5e73\u53f0\uff0c\u5982glfw\u3001glut\u3002</p> <p>\u672c\u6559\u7a0b\u91c7\u7528glfw\uff0c\u4e0b\u8f7d\u5730\u5740\uff1aAn OpenGL library | GLFW</p> <pre><code>#include \"GLFW/glfw3.h\"\nint main(void)\n{\nGLFWwindow* window;\n/* Initialize the library */\nif (!glfwInit()) return -1;\n/* Create a windowed mode window and its OpenGL context */\nwindow = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\nif (!window) {\nglfwTerminate();\nreturn -1;\n}\n/* Make the window's context current */\nglfwMakeContextCurrent(window);\n/* Loop until the user closes the window */\nwhile (!glfwWindowShouldClose(window)) {\n/* Render here */\nglClear(GL_COLOR_BUFFER_BIT);\nglBegin(GL_TRIANGLES);\nglVertex2f(-0.5f, -0.5f);\nglVertex2f(0.0f, 0.5f);\nglVertex2f(0.5f, -0.5f);\nglEnd();\n/* Swap front and back buffers */\nglfwSwapBuffers(window);\n/* Poll for and process events */\nglfwPollEvents();\n}\nglfwTerminate();\nreturn 0;\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/01%20Hi%2C%20OpenGL/#opengl_1","title":"\u83b7\u53d6OpenGL\u51fd\u6570\u6307\u9488","text":"<p>OpenGL\u53ea\u662f\u4e00\u4e2a\u89c4\u8303\uff0c\u800c\u51fd\u6570\u5b9e\u73b0\u5219\u5728\u663e\u5361\u9a71\u52a8\u91cc\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u53bb\u663e\u5361\u9a71\u52a8\u4e2d\u53d6\u51faOpenGL\u51fd\u6570\u7684\u6307\u9488\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5728\u5b89\u88c5\u5b8c\u663e\u5361\u9a71\u52a8\u4e4b\u540e\uff0c\u4f1a\u6709\u4e00\u4e2a\u9a71\u52a8\u7684\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u68c0\u7d22\u6b64\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u51fd\u6570\u6307\u9488\uff0c\u627e\u51fa\u81ea\u5df1\u6240\u9700\u8981\u7684\u3002</p> <p>\u5e02\u9762\u4e0a\u6709\u5f88\u591a\u7b2c\u4e09\u65b9\u5e93\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u5e76\u4e14\u5b83\u4eec\u4e5f\u652f\u6301\u8de8\u5e73\u53f0\uff08\u4ee3\u7801\u8de8\u5e73\u53f0\uff1a\u4e00\u6837\u7684\u4ee3\u7801\uff0c\u62ff\u5230\u4e0d\u540c\u5e73\u53f0\u7f16\u8bd1\u4e5f\u80fd\u8fd0\u884c\uff09\u3002\u5982glew\u3001glad\u7b49\u7b49\u3002</p> <p>\u672c\u6559\u7a0b\u4f7f\u7528glew\uff08The OpenGL Extension Wrangler Library\uff09\uff0c\u4e0b\u8f7d\u5730\u5740\uff1aGLEW: The OpenGL Extension Wrangler Library (sourceforge.net)</p> <p>\u4f7f\u7528glew\u9700\u6ce8\u610f</p> <ol> <li>\u82e5\u4f7f\u7528glew\u7684\u9759\u6001\u5e93\uff0c\u9700\u8981\u5728\u5f15\u7528\u5e93\u4e4b\u524d\u5b9a\u4e49\u5b8f<code>GLEW_STATIC</code></li> <li>\u5fc5\u987b\u5728\u521b\u5efa\u4e86\u7a97\u53e3\u3001\u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u4e4b\u540e\uff08\u4e0a\u4e0b\u6587\u6709\u6548\uff09\uff0c\u624d\u80fd\u8c03\u7528<code>glewInit</code></li> </ol> <pre><code>#include &lt;iostream&gt;\n#define GLEW_STATIC\n#include \"GL/glew.h\"\n#include \"GLFW/glfw3.h\"\nint main(void)\n{\n//...\nGLenum err = glewInit();\nif (GLEW_OK != err) {\nstd::cout &lt;&lt; \"Error: \" &lt;&lt; glewGetErrorString(err) &lt;&lt; std::endl;\n}\nstd::cout &lt;&lt; \"Status: Using GLEW \" &lt;&lt; glewGetString(GLEW_VERSION) &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Status: Using GL \" &lt;&lt; glGetString(GL_VERSION) &lt;&lt; std::endl;\n//...\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/","title":"02 Draw Triangle","text":""},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#opengl","title":"\u4f20\u7edfOpenGL","text":"<p>\u5728\"Hi, OpenGL\"\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4f20\u7edf\u7684OpenGL\u7ed8\u5236\u4e86\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u4f20\u7edf\u7684OpenGL\u4f7f\u7528<code>glBegin()</code>\u548c<code>glEnd()</code>\u5373\u53ef\u5b8c\u6210\u56fe\u5f62\u7684\u7ed8\u5236\u3002</p> <pre><code>glBegin(GL_TRIANGLES);\nglVertex2f(-0.5f, -0.5f);\nglVertex2f( 0.0f,  0.5f);\nglVertex2f( 0.5f, -0.5f);\nglEnd();\n</code></pre>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#opengl_1","title":"\u73b0\u4ee3OpenGL","text":"<p>\u73b0\u4ee3OpenGL\u7ed8\u5236\u7684\u6d41\u7a0b\uff1a</p> <ol> <li>\u5b9a\u4e49\u4e00\u4e9b\u6570\u636e\u6765\u8868\u793a\u4e09\u89d2\u5f62\uff0c\u7136\u540e\u628a\u5b83\u4eec\u653e\u5230\u663e\u5b58\u4e2d</li> <li>\u7136\u540e\u53d1\u51faDrawCall\u6307\u4ee4\u3002\u8fd9\u662f\u4e00\u4e2a\u7ed8\u5236\u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1aHey\u663e\u5361\uff0c\u4f60\u7684\u663e\u5b58\u4e2d\u6709\u4e00\u5806\u6570\u636e\uff0c\u8bfb\u53d6\u5b83\uff0c\u5e76\u4e14\u628a\u5b83\u7ed8\u5236\u5728\u5c4f\u5e55\u4e0a</li> <li>\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u8fd8\u9700\u544a\u8bc9\u663e\u5361\u5982\u4f55\u8bfb\u53d6\u548c\u89e3\u91ca\u8fd9\u4e9b\u6570\u636e\uff0c\u4ee5\u53ca\u5982\u4f55\u628a\u5b83\u653e\u5230\u6211\u4eec\u7684\u5c4f\u5e55\u4e0a</li> <li>\u7740\u8272\u5668\u8d1f\u8d23\u5982\u4f55\u89e3\u91ca\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u7ed8\u5236</li> </ol> <p>OpenGL\u5177\u4f53\u64cd\u4f5c\u662f\u4e00\u4e2a\u72b6\u6001\u673a</p> <ul> <li>\u8fd9\u610f\u5473\u7740\u4f60\u65e0\u9700\u628a\u5b83\u4eec\u770b\u6210\u5bf9\u8c61\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u4f60\u505a\u7684\u4e00\u5207\u90fd\u662f\u5728\u8bbe\u7f6e\u4e00\u7cfb\u5217\u7684\u72b6\u6001</li> </ul>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#_1","title":"\u9876\u70b9\u7f13\u51b2\u533a","text":"<p>\u7f13\u51b2\u533a\uff1a\u4e00\u5757\u7528\u6765\u5b58\u50a8\u5b57\u8282\u7684\u5185\u5b58\u3002</p> <p>OpenGL\u4e2d\u7684\u5185\u5b58\u7f13\u51b2\u533a</p> <ul> <li>\u8fd9\u5757\u5185\u5b58\u5b9e\u9645\u4e0a\u662f\u5728\u663e\u5361\u4e2d\u7684\uff0c\u5728VRAM\uff08\u663e\u5b58\uff0cVideo RAM\uff09\u5f53\u4e2d</li> </ul> <p>\u9876\u70b9\u7f13\u51b2\u533a\uff1a\u5b58\u50a8\u9876\u70b9\u6570\u636e\u7684\u7f13\u51b2\u533a</p> <p>\u9876\u70b9\u2260\u4f4d\u7f6e</p> <ul> <li>\u9876\u70b9\u4e0e\u4f4d\u7f6e\u65e0\u5173</li> <li>\u9876\u70b9\u662f\u51e0\u4f55\u56fe\u5f62\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5b83\u5177\u6709\u5f88\u591a\u4e2a\u5c5e\u6027\uff1a\u4f4d\u7f6e\u3001\u7eb9\u7406\u5750\u6807\u3001\u6cd5\u7ebf\u3001\u989c\u8272\u7b49\u7b49\uff0c\u800c\u4f4d\u7f6e\u53ea\u662f\u5176\u4e2d\u4e00\u4e2a\u5c5e\u6027</li> <li>\u5982\u679c\u53ea\u6709\u4f4d\u7f6e\u5c5e\u6027\uff0c\u90a3\u53ef\u4ee5\u8bf4\u662f\u9876\u70b9\u4f4d\u7f6e\uff0c\u800c\u4e0d\u80fd\u79f0\u4e3a\u9876\u70b9</li> </ul>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#glgenbuffers","title":"glGenBuffers","text":"<p>\u5728GPU\u4e2d\u751f\u6210buffer\uff0c\u5e76\u83b7\u5f97\u8fd9\u4e9bBuffer\u7684ID</p> <ol> <li>OpenGL\u4e00\u6b21\u53ef\u4ee5\u751f\u6210\u4e00\u5806\u7f13\u51b2\u533a\uff0c\u56e0\u6b64\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u5f53\u4e2d\uff0c\u6307\u5b9a\u4f60\u9700\u8981\u751f\u6210\u51e0\u4e2a\u7f13\u51b2\u533a</li> <li>\u8fd9\u4e2a\u51fd\u6570\u4e0d\u8fd4\u56de\u751f\u6210\u7684\u7f13\u51b2\u533aid\uff0c\u5b83\u662f\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fd4\u56de\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u6574\u6570\u6765\u63a5\u6536\u7f13\u51b2\u533aid<ol> <li>\u4f46\u56e0\u4e3a\u4e00\u6b21\u53ef\u4ee5\u751f\u6210\u591a\u4e2a\uff0c\u6240\u4ee5\u662f\u4f20\u5165\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u5f62\u6307\u9488\u3002\u9700\u9002\u914d\u4e00\u5806\u7f13\u51b2\u533a\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u6570\u7ec4</li> <li>\u57fa\u672c\u4e0a\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u6570\u5b57\uff0c\u6bd4\u59821\u30012\u30013\u7b49\u7b49\uff0c\u90a3\u662f\u4f60\u7533\u8bf7\u5b9e\u9645\u5bf9\u8c61\u7684ID\u3002\u65e0\u8bba\u662f\u9876\u70b9\u7f13\u51b2\u533a\uff0c\u8fd8\u662f\u9876\u70b9\u6570\u7ec4\u3001\u7eb9\u7406\u3001\u7740\u8272\u5668\u6216\u8005\u4efb\u4f55\u5176\u4ed6\u4e1c\u897f\uff0cOpenGL\u8fd4\u56de\u7ed9\u4f60\u7684\u90fd\u662f\u4e00\u4e2aID</li> </ol> </li> </ol> <pre><code>unsigned int buffer;\nglGenBuffers(1, &amp;buffer);\n</code></pre>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#glbindbuffer","title":"glBindBuffer","text":"<p>\u4f60\u53ef\u80fd\u5728GPU\u4e2d\u751f\u6210\u4e86\u5f88\u591abuffer\uff0c\u4f46OpenGL\u4e00\u6b21\u64cd\u4f5c\u7684buffer\u4e2a\u6570\u6709\u9650\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u9009\u62e9buffer\u3002</p> <p>\u5728OpenGL\u4e2d\u9009\u62e9(selecting)\u88ab\u79f0\u4e4b\u4e3a\u7ed1\u5b9a(binding)</p> <ol> <li>\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fbuffer\u7684\u7c7b\u578b\u3002\u9876\u70b9\u7f13\u51b2\u533a\u5bf9\u5e94\u7684\u662fGL_ARRAY_BUFFER</li> <li>\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fbuffer\u7684ID</li> </ol> <pre><code>glBindBuffer(GL_ARRAY_BUFFER, buffer); //\u8fd9\u610f\u5473\u7740\uff0c\u6211\u9700\u8981\u4f7f\u7528buffer\u8fd9\u4e2a\u7f13\u51b2\u533a\n</code></pre>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#glbufferdata","title":"glBufferData","text":"<p>\u628a\u6570\u636e\u653e\u5230\u7f13\u51b2\u533a\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f</p> <ol> <li>\u4e0d\u9700\u8981\u9a6c\u4e0a\u63d0\u4f9b\u6570\u636e\uff0c\u4e4b\u540e\u5728\u66f4\u65b0\u7684\u65f6\u5019\u518d\u7ed9</li> <li>\u5728\u521b\u5efa\u7f13\u51b2\u533a\u65f6\uff0c\u76f4\u63a5\u7ed9\u6570\u636e</li> </ol> <p>\u8fd9\u91cc\u662f\u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u5728\u521b\u5efa\u7f13\u51b2\u533a\u3001\u7ed1\u5b9a\u7f13\u51b2\u533a\u4e4b\u540e\u76f4\u63a5\u7ed9\u6570\u636e</p> <pre><code>float positions[2 * 3] = {\n-0.5f, -0.5f,\n0.0f,  0.5f,\n0.5f, -0.5f\n};\nglBufferData(GL_ARRAY_BUFFER, 6 * sizeof(float), positions, GL_STATIC_DRAW);\n</code></pre> <p>\u53c2\u6570\uff1a\u7ed8\u5236\u6a21\u5f0f</p> <ol> <li><code>STREAM</code>  \u88ab\u4fee\u6539\u4e00\u6b21\uff0c\u53ea\u80fd\u4f7f\u7528\u51e0\u6b21\u3002</li> <li><code>STATIC</code> \u4fee\u6539\u4e00\u6b21\u3001\u4f7f\u7528\u591a\u6b21\u3002\u4e0d\u4f1a\u6bcf\u5e27\u4fee\u6539buffer\uff0c\u4f46\u6bcf\u5e27\u90fd\u7528\u8fd9\u4e00\u4e2abuffer\u7ed8\u5236</li> <li><code>DYNAMIC</code> \u53cd\u590d\u4fee\u6539\u3001\u591a\u6b21\u4f7f\u7528\u3002\u6bcf\u5e27\u4fee\u6539\u8fd9\u4e9b\u9876\u70b9\uff0c\u5e76\u4e14\u6bcf\u5e27\u7ed8\u5236</li> </ol> <p>\u4f46\u8fd9\u53ea\u662f\u63d0\u793a\uff0c\u5982\u679c\u4f60\u7533\u660e\u4e3a<code>STATIC</code>\uff0c\u7136\u540e\u6bcf\u5e27\u8fd8\u662f\u4f1a\u66f4\u65b0\u7f13\u51b2\u533a\u3002\u867d\u7136\u8fd9\u8fdd\u53cd\u4e86\u63d0\u793a(hint)\uff0c\u4f46\u4e5f\u80fd\u8fd0\u884c\uff0c\u53ea\u662f\u901f\u5ea6\u6bd4\u8f83\u6162\u3002</p>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#glvertexattribpointer","title":"glVertexAttribPointer","text":"<p>\u4e0a\u4e00\u6b65\u4e4b\u540e\uff0c\u6570\u636e\u5df2\u7ecf\u62f7\u8d1d\u5230GPU\u5f53\u4e2d\u4e86\u3002\u4f46\u8fd9\u4e9b\u6570\u636e\u53ea\u662f\u4e00\u4e9b\u5b57\u8282\uff0cOpenGL\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u6b63\u786e\u89e3\u8bfb\u8fd9\u4e9b\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u544a\u8bc9OpenGL\uff0c\u201c\u5185\u5b58\u4e2d\u6709\u4ec0\u4e48\uff1f\u5b83\u4eec\u53c8\u662f\u5982\u4f55\u5e03\u5c40\u7684\uff1f\u201d\u3002</p> <pre><code>//\u542f\u7528\u9876\u70b9\u5c5e\u6027\u6570\u7ec4\uff0c\u7d22\u5f150\uff0c\u7684\u4f4d\u7f6e\nglEnableVertexAttribArray(0);\n//\u544a\u8bc9GPU\uff0c\u5f53\u524d\u7f13\u51b2\u533a\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u5373positions\u7684\u5185\u5b58\u5e03\u5c40\n//\u5f53\u524d\uff0cpositions\u4e2d\u53ea\u6709\u4f4d\u7f6e\u5c5e\u6027\nglVertexAttribPointer(0,  //\u6307\u5b9a\u7b2c\u4e00\u4e2a\u9876\u70b9\u5c5e\u6027\u7684\u5e03\u5c40\n2,   //\u9876\u70b9\u4f4d\u7f6e\u662f\u4e8c\u7ef4\u7684\uff0c\u6709\u4e24\u4e2a\u5206\u91cf\uff0csize=2\u5373\u53ef\nGL_FLOAT,\nGL_FALSE,\n2 * sizeof(float), //\u4e00\u4e2a\u9876\u70b9\u7684\u5927\u5c0f\n0 //positions\u4e2d\u53ea\u5305\u542b\u4e86\u4e00\u4e2a\u9876\u70b9\u5c5e\u6027\uff0c\u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u4f4d\u79fb\u91cf\n);\n</code></pre> <p>\u51fd\u6570\u58f0\u660e\uff1a <pre><code>void\u00a0glVertexAttribPointer(\nGLuint\u00a0index,\nGLint\u00a0size,\nGLenum\u00a0type,\nGLboolean\u00a0normalized,\nGLsizei\u00a0stride,\nconst GLvoid *\u00a0pointer);\nvoid\u00a0glVertexAttribIPointer(\nGLuint\u00a0index,\nGLint\u00a0size,\nGLenum\u00a0type,\nGLsizei\u00a0stride,\nconst GLvoid *\u00a0pointer);\nvoid\u00a0glVertexAttribLPointer(\nGLuint\u00a0index,\nGLint\u00a0size,\nGLenum\u00a0type,\nGLsizei\u00a0stride,\nconst GLvoid *\u00a0pointer);\n</code></pre></p> <p>\u53c2\u6570\uff1aindex</p> <ul> <li>\u5b83\u662f\u7f13\u51b2\u533a\u4e2d\u5b9e\u9645\u5c5e\u6027\u7684\u7d22\u5f15</li> <li>\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u4f1a\u6307\u5b9a\u4f4d\u7f6e\u5c5e\u6027\u7684index=0\uff0c\u7eb9\u7406\u5750\u6807\u7684index=1\uff0c\u6cd5\u7ebf\u7684index=2</li> </ul> <p>\u53c2\u6570\uff1asize</p> <ul> <li>\u9876\u70b9\u5c5e\u6027\u7684\u5206\u91cf\u6570\uff0c\u53ea\u80fd\u662f1\u30012\u30013\u30014</li> <li>\u4f8b\u5982\uff0c\u5f53\u524d\u7684\u4f8b\u5b50\uff0c\u9876\u70b9\u4f4d\u7f6e\u662f\u4e8c\u7ef4\u7684\uff0c\u6709\u4e24\u4e2a\u5206\u91cf\uff0csize=2\u5373\u53ef</li> </ul> <p>\u53c2\u6570\uff1atype</p> <ul> <li>\u6570\u636e\u7c7b\u578b\uff0c\u5982<code>GL_FLOAT</code></li> </ul> <p>\u53c2\u6570\uff1anormalized</p> <ul> <li>\u4e00\u822c\u662f\u4e0d\u9700\u8981\u7684\uff0c\u7f6e\u4e3afalse</li> <li>\u4f8b\u5982\u989c\u8272\uff0c\u503c\u57280-255\u4e4b\u95f4\uff0c\u5b83\u9700\u8981\u88ab\u89c4\u8303\u5316\u52300\u52301\u4e4b\u95f4\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528normalized\u8fd9\u4e2a\u53c2\u6570\uff0c\u5c06\u5b83\u7f6e\u4e3atrue</li> </ul> <p>\u53c2\u6570\uff1astride</p> <ul> <li>stride\u5c31\u662f\u6bcf\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u5b57\u8282\u6570</li> <li>\u4f8b\u5982\uff0c\u6b64\u65f6\u9876\u70b9\u5177\u6709\u4f4d\u7f6e\u3001\u7eb9\u7406\u5750\u6807\u3001\u6cd5\u7ebf\u4e09\u4e2a\u5c5e\u6027\u3002\u4f4d\u7f6e\u662f3\u4e2afloat\u3001\u7eb9\u7406\u5750\u6807\u662f2\u4e2afloat\u3001\u6cd5\u7ebf\u662f3\u4e2afloat\uff0c\u56e0\u6b64<code>stride=8*sizeof(float)=32\u4e2a\u5b57\u8282</code></li> <li>0\u662f\u7b2c\u4e00\u4e2a\u9876\u70b9\uff1b<code>0+stride</code>\u662f\u7b2c\u4e8c\u4e2a\u9876\u70b9\uff1b<code>0+2*stride</code>\u662f\u7b2c\u4e00\u4e2a\u9876\u70b9</li> </ul> <p>\u53c2\u6570\uff1apointer</p> <ul> <li>pointer\u662f\u6307\u5411\u5b9e\u9645\u5c5e\u6027\u7684\u6307\u9488</li> <li>\u4f8b\u5982\uff0c\u6b64\u65f6\u9876\u70b9\u5177\u6709\u4f4d\u7f6e\u3001\u7eb9\u7406\u5750\u6807\u3001\u6cd5\u7ebf\u4e09\u4e2a\u5c5e\u6027\u3002\u5bf9\u4e8e\u9876\u70b9<code>pointer=0</code>\uff1b\u5bf9\u4e8e\u7eb9\u7406\u5750\u6807<code>pointer=3*4</code>\uff1b\u5bf9\u4e8e\u6cd5\u7ebf<code>pointer=3*4+2*4</code></li> </ul>"},{"location":"1LearnChernoOpenGL/02%20Draw%20Triangle/#drawcall","title":"DrawCall","text":"<p>\u7ed8\u5236\u547d\u4ee4\uff08DrawCall\uff09</p> <ol> <li>\u6ca1\u6709\u7d22\u5f15\u7f13\u51b2\u533a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528<code>glDrawArray()</code>\u51fd\u6570</li> <li>\u5982\u679c\u6709\u7d22\u5f15\u7f13\u51b2\u533a\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528<code>glDrawElements()</code>\u51fd\u6570</li> </ol> <pre><code>int main() {\n//...\nwhile(!glfwWindowShouldClose(window)) {\nglClear(GL_COLOR_BUFFER_BIT);\n//\u7f13\u51b2\u533aoffset=0\u7684\u5730\u65b9\u5f00\u59cb\n//\u7ed8\u52363\u4e2a\u9876\u70b9\nglDrawArrays(GL_TRIANGLES, 0, 3);\n//...\n}\n//...\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/03%20Hi%2C%20Shader/","title":"03 Hi, Shader","text":"<p>\u5982\u679c\u4f60\u6ca1\u6709\u7ed9OpenGL\u63d0\u4f9b\u81ea\u5df1\u7684\u7740\u8272\u5668\uff0c\u4e00\u4e9b\u663e\u5361\u9a71\u52a8\u5b9e\u9645\u4e0a\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7740\u8272\u5668\u3002\u56e0\u6b64\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5df2\u7ecf\u80fd\u7ed8\u5236\u51fa\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e86\u3002</p> <p>\u7740\u8272\u5668\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u663e\u5361\u4e0a\u7684\u7a0b\u5e8f\uff0c\u5b83\u53ef\u4ee5\u5728\u663e\u5361\u4e0a\u4ee5\u4e00\u79cd\u975e\u5e38\u7279\u6b8a\u53c8\u975e\u5e38\u5f3a\u5927\u7684\u65b9\u5f0f\u8fd0\u884c\u3002</p> <ul> <li>Shader\u5f88\u5bb9\u6613\u8ba9\u4eba\u8054\u60f3\u5230\u5149\u6e90\uff0c\u89c9\u5f97\u548c\u7740\u8272\u6709\u5173\uff0c\u4f46\u5b83\u53ea\u662f\u5728\u663e\u5361\u4e0a\u8fd0\u884c\u7684\u4e00\u4e2a\u7a0b\u5e8f\u800c\u5df2\uff0c\u548c\u5b9e\u9645\u7684\u56fe\u5f62\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb</li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u8ba1\u7b97\u673a\u4e0a\u4ee5\u6587\u672c\u6216\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7f16\u5199\u7740\u8272\u5668\u7684\u4ee3\u7801\uff0c\u7136\u540e\u901a\u8fc7OpenGL\u7684API\u628a\u5b83\u4eec\u53d1\u9001\u5230\u663e\u5361\u4e0a\uff0c\u5b83\u80fd\u591f\u5728\u663e\u5361\u4e0a\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c\u3002\u662f\u7684\uff0c\u5b83\u8fd0\u884c\u5728GPU\u4e0a\uff0c\u800c\u4e0d\u50cfC++\u7a0b\u5e8f\u8fd0\u884c\u5728CPU\u4e0a\u3002</p> <p>\u9876\u70b9\u7740\u8272\u5668</p> <ul> <li>\u5b83\u4f1a\u4e3a\u6211\u4eec\u8bd5\u56fe\u6e32\u67d3\u7684\u6bcf\u4e2a\u9876\u70b9\u8c03\u7528\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u544a\u8bc9OpenGL\uff0c\u8fd9\u4e2a\u9876\u70b9\u5728\u5c4f\u5e55\u7a7a\u95f4\u7684\u4ec0\u4e48\u4f4d\u7f6e</li> <li>\u4f8b\u5982\u5f53\u524d\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u67093\u4e2a\u9876\u70b9\uff0c\u56e0\u6b64\u4f1a\u4e3a3\u4e2a\u9876\u70b9\u5206\u522b\u8c03\u7528\u4e00\u6b21\u9876\u70b9\u7740\u8272\u5668</li> </ul> <p>\u7247\u6bb5\u7740\u8272\u5668</p> <ul> <li>\u4e3a\u6bcf\u4e2a\u9700\u8981\u5149\u6805\u5316\u7684\u50cf\u7d20\u8fd0\u884c\u4e00\u6b21\uff0c\u51b3\u5b9a\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272</li> <li>\u4f8b\u5982\u5f53\u524d\u7684\u4f8b\u5b50\uff0c\u7247\u6bb5\u7740\u8272\u5668\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\u6570\u4e07\u6b21\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6b64\u4e09\u89d2\u5f62\u5728\u5c4f\u5e55\u4e0a\u5360\u636e\u4e86\u591a\u5c11\u7a7a\u95f4</li> </ul>"},{"location":"1LearnChernoOpenGL/03%20Hi%2C%20Shader/#_1","title":"\u7248\u672c\u4e00\uff1a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u7740\u8272\u5668","text":"<pre><code>//\u7f16\u8bd1\u7740\u8272\u5668\nstatic unsigned int CompileShader(unsigned int type, const std::string&amp; source)\n{\nunsigned int id = glCreateShader(type); //\u521b\u5efa\u6307\u5b9a\u7c7b\u578b\u7684\u7740\u8272\u5668\nconst char* src = source.c_str();\nglShaderSource(id, 1, &amp;src, nullptr);   //\u6307\u5b9aid\u7740\u8272\u5668\u7684\u6e90\u7801\n//\u4f20\u5165nullptr\uff0c\u8868\u793a\u4ee5src\u662f\u4ee5'\\0'\u7ed3\u675f\u3002\u5982\u679c\u53ea\u60f3\u4f20\u5165source\u4e2d\u7684\u67d0\u4e00\u6bb5\uff0c\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\nglCompileShader(id);                    //\u7f16\u8bd1\u7740\u8272\u5668\n//\u83b7\u53d6\u7f16\u8bd1\u72b6\u6001\nint result;\nglGetShaderiv(id, GL_COMPILE_STATUS, &amp;result);\nif (result == GL_FALSE) {\nint length;\nglGetShaderiv(id, GL_INFO_LOG_LENGTH, &amp;length);     // \u83b7\u53d6\u65e5\u5fd7\u957f\u5ea6\nchar* msg = (char*)_malloca(length * sizeof(char)); //\u5728\u6808\u4e0a\u521b\u5efa\nglGetShaderInfoLog(id, length, &amp;length, msg);       //\u83b7\u53d6\u65e5\u5fd7\u4fe1\u606f\nstd::cout &lt;&lt; \"Failed to compile \" &lt;&lt; (type == GL_VERTEX_SHADER ? \"vertex\" : \"fragment\") &lt;&lt; \" shader!\" &lt;&lt; std::endl;\nstd::cout &lt;&lt; msg &lt;&lt; std::endl;\nglDeleteShader(id); // \u5220\u9664\u7740\u8272\u5668\nreturn 0;\n}\nreturn id;\n}\n//\u521b\u5efa\u7740\u8272\u5668\nstatic int CreateShader(const std::string&amp; vertexShader, const std::string&amp; fragmentShader)\n{\nunsigned int program = glCreateProgram(); //\u521b\u5efa\u7a0b\u5e8f\n//\u521b\u5efa\u7740\u8272\u5668\nunsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader);\nunsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader);\n//\u9644\u52a0\u5230\u4e00\u4e2a\u7a0b\u5e8f\u5f53\u4e2d\nglAttachShader(program, vs);\nglAttachShader(program, fs);\nglLinkProgram(program);     //\u94fe\u63a5\u7a0b\u5e8f\nglValidateProgram(program); //\u9a8c\u8bc1\u662f\u5426\u6709\u6548\n//\u6b64\u65f6\u53ef\u4ee5\u5220\u9664\u4e86\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u88ab\u94fe\u63a5\u5230program\u5f53\u4e2d\u4e86\n//\u548cC++\u7a0b\u5e8f\u7684obj\u4e2d\u95f4\u6587\u4ef6\u4e00\u6837\uff0cvs\u3001fs\u5c31\u53ef\u4ee5\u88ab\u5220\u9664\u4e86\n//\u4f46\u5176\u5b9e\u4e3a\u4e86\u65b9\u4fbf\u8c03\u8bd5\uff0c\u8fd9\u4e2a\u65e0\u9700\u5220\u9664\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u5f00\u9500\u975e\u5e38\u5c0f\nglDeleteShader(vs);\nglDeleteShader(fs);\nreturn program;\n}\nint main(void)\n{\n//...\nstd::string vertexShader =\n\"#version 330 core\\n\"\n\"\\n\"\n\"layout(location = 0)in vec4 position;\"\n//location == glVertexAttribPointer\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\n//\u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u9876\u70b9\u7740\u8272\u5668\u7684\u4f4d\u7f6e\u4f20\u7684\u662fvec2\uff0c\u56e0\u6b64\u7528vec2 position\u66f4\u51c6\u786e\u3002\u4f46\u5982\u679c\u7528vec2\uff0c\u4e0b\u9762\u5219\u9700\u8981\u6539\u6210gl_Position=vec4(position.xy, 0.0, 1.0);\n//\u4f46\u8fd9\u91cc\u53ef\u4ee5\u5199vec4\uff0cOpenGL\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u8865\u9f50\uff0c\u540e\u9762gl_Position\u5c31\u65b9\u4fbf\u4e86\n\"\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\" gl_Position = position;\\n\"    //gl_Postion\u662f\u4e00\u4e2avec4\n\"}\\n\";\nstd::string fragmentShader =\n\"#version 330 core\\n\"\n\"\\n\"\n\"layout(location = 0)out vec4 color;\"\n\"\\n\"\n\"void main()\\n\"\n\"{\\n\"\n\" color = vec4(1.0, 0.0, 0.0, 1.0);\\n\"  //\u6307\u5b9a\u4e3a\u7ea2\u8272\n\"}\\n\";\nunsigned int shader = CreateShader(vertexShader, fragmentShader);\nglUseProgram(shader); /* \u4f7f\u7528\u7740\u8272\u5668\u7a0b\u5e8f */\nwhile (!glfwWindowShouldClose(window)) {\n//...\n}\nglDeleteProgram(shader); //\u5220\u9664\u7740\u8272\u5668\u7a0b\u5e8f\n//...\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/04%20Managing%20shader/","title":"04 Managing shader","text":""},{"location":"1LearnChernoOpenGL/04%20Managing%20shader/#_1","title":"\u7248\u672c\u4e8c\uff1a\u5c06\u7740\u8272\u5668\u4ee3\u7801\u62bd\u5230\u6587\u4ef6\u5f53\u4e2d","text":"<p>\u8001\u5e08\u4e60\u60ef\u628a\u7740\u8272\u5668\u6587\u4ef6\u5b58\u5728<code>res/shaders/</code>\u76ee\u5f55\u4e0b</p> <p>\u8001\u5e08\u4e60\u60ef\u628a\u9876\u70b9\u7740\u8272\u5668\u3001\u7247\u5143\u7740\u8272\u5668\u653e\u5728\u4e00\u4e2a\u6587\u672c\u6587\u4ef6<code>*.shader*</code>\u5f53\u4e2d\u8fdb\u884c\u7ba1\u7406</p> <ul> <li>\u56e0\u4e3a\u5b83\u4eec\u4e00\u822c\u6210\u5bf9\u51fa\u73b0\uff0c\u5206\u6210\u4e24\u4e2a\u6587\u4ef6\u5b58\uff0c\u5f88\u4e0d\u76f4\u89c2</li> </ul> <p>\u4f8b\u5982\u4e0a\u4e00\u4e2a\u4f8b\u5b50</p> <ol> <li>\u5c06\u9876\u70b9\u7740\u8272\u5668\u3001\u7247\u5143\u7740\u8272\u5668\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u5f53\u4e2d<code>res/shaders/Basic.shader</code></li> </ol> <pre><code>#shader vertex\n#version 330 core\nlayout(location = 0) in vec4 position;\nvoid main()\n{\ngl_Position = position;\n}\n#shader fragment\n#version 330 core\nlayout(location = 0) out vec4 color;\nvoid main()\n{\ncolor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n</code></pre> <ol> <li>C++\u4ee3\u7801</li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\n#define GLEW_STATIC\n#include \"GL/glew.h\"\n#include \"GLFW/glfw3.h\"\nstruct ShaderProgramSource\n{\nstd::string VertexSource;\nstd::string FragmentSource;\n};\nstatic ShaderProgramSource ParseShader(const std::string&amp; filepath)\n{\nstd::ifstream stream(filepath);\nenum class ShaderType\n{\nNONE = -1, VERTEX = 0, FRAGMENT = 1\n};\nstd::string line;\nstd::stringstream ss[2];\nShaderType type = ShaderType::NONE;\nwhile(getline(stream, line))\n{\nif(line.find(\"#shader\") != std::string::npos)\n{\nif(line.find(\"vertex\") != std::string::npos)\n{\ntype = ShaderType::VERTEX;\n}\nelse if(line.find(\"fragment\") != std::string::npos)\n{\ntype = ShaderType::FRAGMENT;\n}\n}\nelse\n{\nss[(int)type] &lt;&lt; line &lt;&lt; '\\n';\n}\n}\nreturn {\nss[0].str(),\nss[1].str()\n};\n}\n//...\nint main()\n{\n//...\nShaderProgramSource source = ParseShader(\"res/shaders/Basic.shader\");\n//\u76f8\u5bf9\u8def\u5f84\uff0c\u5728 \u9879\u76ee\u5c5e\u6027&gt;\u8c03\u8bd5&gt;\u5de5\u4f5c\u76ee\u5f55\uff0c\u8bbe\u7f6e\nstd::cout &lt;&lt; source.VertexSource &lt;&lt; std::endl;\nstd::cout &lt;&lt; source.FragmentSource &lt;&lt; std::endl;\nunsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);\nglUseProgram(shader);\nwhile(!glfwWindowShouldClose(window)) {\n//...\n}\n//...\nglDeleteProgram(shader); //\u5220\u9664\u7740\u8272\u5668\u7a0b\u5e8f\nreturn 0;\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/05%20%E7%B4%A2%E5%BC%95%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%88%E5%85%83%E7%B4%A0%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%89/","title":"05 \u7d22\u5f15\u7f13\u51b2\u533a\uff08\u5143\u7d20\u7f13\u51b2\u533a\uff09","text":""},{"location":"1LearnChernoOpenGL/05%20%E7%B4%A2%E5%BC%95%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%88%E5%85%83%E7%B4%A0%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%89/#_1","title":"\u7ed8\u5236\u4e00\u4e2a\u957f\u65b9\u5f62","text":"<p>\u5728\u4e0a\u4e00\u4e2a\u8bfe\u7a0b\u4e2d\uff0c\u7ed8\u5236\u7684\u662f\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u672c\u8282\u8bfe\u6765\u7ed8\u5236\u4e00\u4e2a\u957f\u65b9\u5f62\u3002 \u6709\u4e00\u4e2a\u80cc\u666f\u77e5\u8bc6\u662f\uff0c\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u91cc\u7ed8\u5236\u7684\u57fa\u7840\u56fe\u5143\u90fd\u662f\u4e09\u89d2\u5f62\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u957f\u65b9\u5f62\u62c6\u6210\u4e24\u4e2a\u4e09\u89d2\u5f62\u6765\u8fdb\u884c\u7ed8\u5236\u3002</p> <p>\u53ea\u9700\u4fee\u6539\u4e09\u4e2a\u5730\u65b9\uff0c\u5373\u53ef\u5b8c\u6210\u957f\u65b9\u5f62\u7684\u7ed8\u5236\u3002 <pre><code>//\u5b9a\u4e49\u4e24\u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\nfloat positions[] = {\n-0.5f, -0.5f,\n0.5f, -0.5f,\n0.5f,  0.5f,\n0.5f,  0.5f,\n-0.5f,  0.5f,\n-0.5f, -0.5f\n};\n//\u8c03\u6574\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5927\u5c0f\nglBufferData(GL_ARRAY_BUFFER, 6 * 2 * sizeof(float), positions, GL_STATIC_DRAW);\n//\u7ed8\u5236\u65f6\uff0c\u7ed8\u52366\u4e2a\u9876\u70b9\nglDrawArrays(GL_TRAINGLES, 0, 6);\n</code></pre></p>"},{"location":"1LearnChernoOpenGL/05%20%E7%B4%A2%E5%BC%95%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%88%E5%85%83%E7%B4%A0%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%89/#_2","title":"\u4f7f\u7528\u7d22\u5f15\u7f13\u51b2\u533a\u4ee5\u91cd\u7528\u9876\u70b9","text":"<p>\u4e0a\u8282\u7ed8\u5236\u4f7f\u7528\u4e866\u4e2a\u9876\u70b9\uff0c\u4f46\u957f\u65b9\u5f62\u53ea\u67094\u4e2a\u9876\u70b9\uff0c\u591a\u7528\u4e862\u4e2a\u9876\u70b9\u3002\u5176\u5b9e\u80fd\u53d1\u73b02\u4e2a\u9876\u70b9\u662f\u91cd\u590d\u7684\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u7f13\u51b2\u533a\u6765\u91cd\u7528\u6211\u4eec\u7684\u9876\u70b9\uff0c\u51cf\u5c11\u6570\u636e\u91cf\u3002</p> <p>\u7d22\u5f15\u7f13\u51b2\u533a\uff08\u53c8\u540d\uff0c\u5143\u7d20\u7f13\u51b2\u533a\uff09\uff1a\u5141\u8bb8\u6211\u4eec\u91cd\u7528\u9876\u70b9</p> <pre><code>float positions[] = {                  //\u7d22\u5f15\u53f7\n-0.5f, -0.5f,  //0\uff0c\u4ece0\u5f00\u59cb\n0.5f, -0.5f,  //1\n0.5f,  0.5f,  //2\n-0.5f,  0.5f   //3\n};\nunsigned int indices[] = {\n0, 1, 2, //\u7b2c1\u4e2a\u4e09\u89d2\u5f62\n2, 3, 0  //\u7b2c2\u4e2a\u4e09\u89d2\u5f62\n};\nunsigned int buffer;\nglGenBuffers(1, &amp;buffer);\nglBindBuffer(GL_ARRAY_BUFFER, buffer);\nglBufferData(GL_ARRAY_BUFFER, 4 * 2 * sizeof(float), positions, GL_STATIC_DRAW);\nglEnableVertexAttribArray(0);\nglVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0);\n//\u5c06\u7d22\u5f15\u7f13\u51b2\u533a\u53d1\u9001\u5230\u663e\u5361\u4e0a\nunsigned int ibo;\nglGenBuffers(1, &amp;ibo);\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW);\n//...\nwhile(...)\n{\n//...\nglDrawElements(GL_TRANGLES, 6, GL_UNSIGNED_INT, nullptr);\n//\u7ed8\u52366\u4e2a\u7d22\u5f15\n//\u6307\u5411\u7d22\u5f15\u7f13\u51b2\u533a\u7684\u4e00\u4e2a\u6307\u9488\uff1a\u524d\u9762\u5df2\u7ecfglBindBuffer(ibo)\u4e86\uff0c\u53ef\u4ee5\u7528nullptr\n//...\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/06%20%E5%9C%A8OpenGL%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/","title":"06 \u5728OpenGL\u4e2d\u5904\u7406\u9519\u8bef","text":""},{"location":"1LearnChernoOpenGL/06%20%E5%9C%A8OpenGL%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/#glgeterror","title":"glGetError","text":""},{"location":"1LearnChernoOpenGL/06%20%E5%9C%A8OpenGL%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/#_1","title":"\u7b80\u6613\u4f7f\u7528","text":"<pre><code>static void GLClearError()\n{\nwhile(glGetError() != GL_NO_ERROR);\n}\nstatic void GLCheckError()\n{\nwhile(GLenum error = glGetError())\n{\nstd::cout &lt;&lt; \"[OpenGL Error] (\"\n&lt;&lt; error &lt;&lt; \")\"\n&lt;&lt; std::endl;\n}\n}\n//\u4f7f\u7528\uff0c\u7528\u4e24\u4e2a\u51fd\u6570\u5939\u4f4fOpenGL\u7684\u51fd\u6570\nGLClearError(); //\u6e05\u9664\u5728\u4e4b\u524d\u7684\u6240\u6709\u9519\u8bef\nglDrawElements(GL_TRIANGLES, 6, GL_INT, nullptr);\nGLCheckError(); //\u68c0\u67e5\u4e0a\u4e00\u53e5\u8bdd\u662f\u5426\u62a5\u9519\n</code></pre>"},{"location":"1LearnChernoOpenGL/06%20%E5%9C%A8OpenGL%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/#_2","title":"\u5c01\u88c5\u6210\u65ad\u8a00\u7684\u5f62\u5f0f","text":"<pre><code>#define ASSERT(x) if(!(x)) __debugbreak();\n//__debugbreak()\u662fVS MSVC\u8c03\u8bd5\u5668\u7684\u4e2d\u65ad\u8bed\u53e5\n#define GLCall(x) GLClearError();\\\n    x;\\\n    ASSERT(GLLogCall(#x, __FILE__, __LINE__))\nstatic void GLClearError()\n{\nwhile(glGetError() != GL_NO_ERROR);\n}\nstatic bool GLLogCall(const char* function, const char* file, int line)\n{\nwhile(GLenum error = glGetError())\n{\nstd::cout &lt;&lt; \"[OpenGL Error] (\"\n&lt;&lt; error &lt;&lt; \")\"\n&lt;&lt; \": \" &lt;&lt; function\n&lt;&lt; \" \" &lt;&lt; file\n&lt;&lt; \" \" &lt;&lt; line\n&lt;&lt; std::endl;\nreturn false;\n}\nreturn true;\n}\n//\u4f7f\u7528OpenGL\u51fd\u6570\u65f6\uff0c\u7528GLCall\u5305\u88c5\u4e00\u4e0b\u5c31\u884c\nGLCall(unsigned int program = glCreateProgram());\nGLCall(glDrawElements(GL_TRIANGLES, 6, GL_INT, nullptr));\n</code></pre>"},{"location":"1LearnChernoOpenGL/06%20%E5%9C%A8OpenGL%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/#opengl","title":"OpenGL\u9519\u8bef\u7801","text":"<p><code>GLenum error = glGetError()</code>\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7801\uff0c\u5982\u4f55\u67e5\u770b\u5b83\u7684\u9519\u8bef\u4fe1\u606f\u5462\uff1f</p> <p>\u4f8b\u5982\uff0c\u9519\u8bef\u78011280</p> <p>1.\u5728<code>glew.h</code>\u4e2d\uff0c\u641c\u7d221280\u7684\u5341\u516d\u8fdb\u5236\u6570\uff08\u5373<code>0x0500</code>\uff09\uff0c\u5c31\u80fd\u83b7\u5f97\u4e00\u4e2a <pre><code>#define GL_INVALID_ENUM 0x500\n</code></pre></p> <p>2.\u7136\u540e\u5728<code>docs.gl/gl4/glGetError</code>\u6587\u6863\u4e2d\u627e\u5230\u8fd9\u4e2a\u9519\u8bef\uff0c\u5373\u53ef\u77e5\u9053\u5bf9\u5e94\u7684\u9519\u8bef\u8be6\u60c5</p>"},{"location":"1LearnChernoOpenGL/06%20%E5%9C%A8OpenGL%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/#gldebugmessagecallback","title":"glDebugMessageCallback","text":"<p>\u5728OpenGL4.3\u4ee5\u540e\uff0c\u63d0\u4f9b\u4e86\u56de\u8c03\u51fd\u6570\u8ba9\u6211\u4eec\u83b7\u53d6OpenGL\u7684\u4fe1\u606f</p>"},{"location":"1LearnChernoOpenGL/07%20Shader%20Uniform/","title":"07 Shader Uniform","text":""},{"location":"1LearnChernoOpenGL/07%20Shader%20Uniform/#uniform","title":"uniform\u53d8\u91cf","text":"<p>\u4e0a\u4e00\u8282\u4e2d\uff0c\u5728\u7247\u5143\u7740\u8272\u4e2d\uff0c\u6211\u4eec\u786c\u7f16\u7801\u8f93\u5165\u4e86\u4e00\u4e2a\u989c\u8272\uff0c\u6307\u5b9a\u4e3a\u4e86\u7ea2\u8272\u3002</p> <p>\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u4f7f\u7528uniform\u53d8\u91cf\uff0c\u4eceCPU\u4e2d\u4f20\u4e00\u4e2a\u989c\u8272\u5230\u7247\u5143\u7740\u8272\u5668\uff0c\u4f7f\u7528\u8fd9\u4e2a\u989c\u8272\u4f5c\u4e3a\u7247\u5143\u7684\u6700\u7ec8\u989c\u8272\u3002</p> <p>uniform</p> <ul> <li>CPU\u4f20\u6570\u636e\u5230\u663e\u5361\u7684\u4e00\u79cd\u65b9\u5f0f</li> </ul> <p>1.\u5728shader\u4e2d\u6dfb\u52a0\u4ee3\u7801 <pre><code>//...\n#shader fragment\n#version 330 core\nlayout(location = 0) out vec4 color;\nuniform vec4 u_Color; //\u8bb0\u4f4fu_Color\u8fd9\u4e2a\u540d\u5b57\uff0c\u5728\u901a\u8fc7OpenGL\u4f20\u503c\u65f6\uff0c\u9700\u8981\u7528\u5230\u5b83\nvoid main()\n{\ncolor = u_Color;\n}\n</code></pre></p> <p>2.\u5728C++\u4ee3\u7801\u4e2d\u4f20\u503c <pre><code>//...\nint main()\n{\n//...\n/**\n     * \u4ea4\u6362\u95f4\u9694\uff0c\u4ea4\u6362\u7f13\u51b2\u533a\u4e4b\u524d\u7b49\u5f85\u7684\u5e27\u6570\uff0c\u901a\u5e38\u79f0\u4e3av-sync\n     * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4ea4\u6362\u95f4\u9694\u4e3a0\n     * \u8fd9\u91cc\u8bbe\u7f6e\u4e3a1\uff0c\u5373\u6bcf\u5e27\u66f4\u65b0\u4e00\u6b21\n     **/\nglfwSwapInterval(1);\n//...\nint location = glGetUniformLocation(shader, \"u_Color\"); //\u83b7\u53d6\u53d8\u91cf\u7684\u53e5\u67c4\nASSERT(location != -1); //-1\u610f\u5473\u7740\u6211\u4eec\u6ca1\u6709\u627e\u5230\u6307\u5b9a\u7684uniform\u53d8\u91cf\nfloat r = 0.0f;\nfloat increment = 0.05f\nwhile(...)\n{\nglClear(GL_COLOR_BUFFER_BIT);\nglUniform4f(location, r, 0.3f, 0.8f, 1.0f); //\u4f20\u503c\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr);\nif(r&gt;1.0f)      increment = -0.05f;\nelse if(r&lt;0.0f) increment =  0.05f;\nr += increment;\n//...\n}\n//...\nreturn 0;\n}\n</code></pre></p>"},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/","title":"08 \u9876\u70b9\u6570\u7ec4","text":""},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#_1","title":"\u4e3a\u4ec0\u4e48\u8981\u6709\u9876\u70b9\u6570\u7ec4","text":"<p>\u5728\u4e4b\u524d\u7684\u6848\u4f8b\u5f53\u4e2d\uff0c<code>positions</code>\u548c<code>indices</code>\u90fd\u662f\u786c\u7f16\u7801\u5199\u6b7b\u7684\u3002\u4f46\u662f\u5728\u5b9e\u9645\u5e94\u7528\u5f53\u4e2d\uff0c\u4e24\u8005\u53ef\u80fd\u90fd\u4f1a\u6539\u53d8\uff0c\u800c\u4e14\u4e0d\u4ec5\u662f\u6570\u503c\u4f1a\u6539\u53d8\uff0c\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u9876\u70b9\u5c5e\u6027\uff0c\u5982\u9876\u70b9\u6cd5\u5411\u91cf\u3001\u9876\u70b9\u989c\u8272\u7b49\u7b49\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u9876\u70b9\u7f13\u51b2\u533a\u4f1a\u53d8\u5316\uff0c\u770b\u4e00\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u505a\u54ea\u4e9b\u64cd\u4f5c\u3002</p> <pre><code>//...\nint main(void)\n{\n//...\nfloat positions[] =\n{                  //\u7d22\u5f15\u53f7\n-0.5f, -0.5f,  //0\uff0c\u4ece0\u5f00\u59cb\n0.5f, -0.5f,  //1\n0.5f,  0.5f,  //2\n-0.5f,  0.5f   //3\n};\nunsigned int indices[] =\n{\n0, 1, 2, //\u7b2c1\u4e2a\u4e09\u89d2\u5f62\n2, 3, 0  //\u7b2c2\u4e2a\u4e09\u89d2\u5f62\n};\n//\u521b\u5efa\u4e00\u4e2a\u7f13\u51b2\u533a\nunsigned int buffer;\nGLCall(glGenBuffers(1, &amp;buffer));\n//\u4e3aGL_ARRAY_BUFFER\u7c7b\u578b\u7ed1\u5b9a\u4e00\u4e2a\u7f13\u51b2\u533a\nGLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));\n//\u5c06\u6570\u636e\u62f7\u8d1d\u5230GL_ARRAY_BUFFER\u7c7b\u578b\u7684\u7f13\u51b2\u533a\u4e0a\nGLCall(glBufferData(GL_ARRAY_BUFFER, 4 * 2 * sizeof(float), positions, GL_STATIC_DRAW));\n//\u6307\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5e03\u5c40\nGLCall(glEnableVertexAttribArray(0));\nGLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0));\n//\u521b\u4e00\u4e2a\u7f13\u51b2\u533a\nunsigned int ibo;\nGLCall(glGenBuffers(1, &amp;ibo));\n//\u4e3aGL_ELEMENT_ARRAY_BUFFER\u7c7b\u578b\u7ed1\u5b9a\u4e00\u4e2a\u7f13\u51b2\u533a\nGLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo));\n//\u5c06\u6570\u636e\u62f7\u8d1d\u5230GL_ELEMENT_ARRAY_BUFFER\u7c7b\u578b\u7684\u7f13\u51b2\u533a\u4e0a\nGLCall(glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW));\n//\u7740\u8272\u5668\nShaderProgramSource source = ParseShader(\"res/shaders/Basic.shader\");\nunsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);\nGLCall(glUseProgram(shader));\n//\u83b7\u53d6\u53d8\u91cf\u7684\u53e5\u67c4\nint location;\nGLCall(location = glGetUniformLocation(shader, \"u_Color\"));\nASSERT(location != -1);\n//\u5728\u521b\u5efa\u5b8c\u9876\u70b9\u7f13\u51b2\u533a\u4e0e\u7d22\u5f15\u7f13\u51b2\u533a\u540e\uff0c\u8981\u8fdb\u884c\u89e3\u7ed1\u3002\u56e0\u4e3a\u5728\u4e0b\u4e00\u4e2a\u6d41\u7a0b\u5f53\u4e2d\uff0c\u53ef\u80fd\u4f1a\u521b\u5efa\u522b\u7684\u7f13\u51b2\u533a\nGLCall(glUseProgram(0));                            //\u89e3\u7ed1\u7740\u8272\u5668\nGLCall(glBindBuffer(GL_ARRAY_BUFFER, 0));           //\u89e3\u7ed1\u9876\u70b9\u7f13\u51b2\u533a\nGLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0));   //\u89e3\u7ed1\u7d22\u5f15\u7f13\u51b2\u533a\nfloat r = 0.0f;\nfloat increment = 0.05f;\nwhile (!glfwWindowShouldClose(window))\n{\nGLCall(glClear(GL_COLOR_BUFFER_BIT));\n//\u5728\u7ed8\u5236\u524d\uff0c\u624d\u51b3\u5b9a\u8981\u4f7f\u7528\u54ea\u4e2a\u7740\u8272\u5668\u3001\u54ea\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\u548c\u54ea\u4e2a\u7d22\u5f15\u7f13\u51b2\u533a\n//\u7740\u8272\u5668\nGLCall(glUseProgram(shader));                            //\u9876\u70b9\u7f13\u51b2\u533a\nGLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));\nGLCall(glEnableVertexAttribArray(0));   //\u5982\u679c\u524d\u9762disalbeVertexAttribArray\u7684\uff0c\u8fd9\u91cc\u9700\u8981Enable\nGLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0)); //\u8fd9\u91cc\u8fd8\u9700\u8981\u544a\u8bc9OpenGL\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5185\u5b58\u5e03\u5c40\n//\u7d22\u5f15\u7f13\u51b2\u533a\nGLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo));\nGLCall(glUniform4f(location, r, 0.3f, 0.8f, 1.0f)); //\u4f20\u503c\nGLCall(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr));\nif (r &gt; 1.0f)      increment = -0.05f;\nelse if (r &lt; 0.0f) increment = 0.05f;\nr += increment;\nglfwSwapBuffers(window);\nglfwPollEvents();\n}\nGLCall(glDeleteProgram(shader));\nglfwTerminate();\nreturn 0;\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u5728\u7ed8\u5236\u65f6\uff0c\u53c8\u8981\u6307\u5b9a\u4e00\u6b21\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5e03\u5c40\uff1f</p> <ul> <li>\u56e0\u4e3a<code>glVertexAttribPointer</code>\u662f\u4f5c\u7528\u4e8eOpenGL\u5f53\u524d\u7684<code>GL_ARRAY_BUFFER</code>\uff0c\u800c\u5e76\u6ca1\u6709\u5b58\u50a8\u5230<code>buffer</code>\u6240\u6307\u5411\u7684\u7f13\u51b2\u533a\u4e0a</li> <li>\u56e0\u6b64\uff0c\u5728\u7ed8\u5236\u7684\u65f6\u5019\uff0c\u5728\u6211\u4eec\u91cd\u65b0\u7ed1\u5b9a\u4e00\u4e2a\u9876\u70b9\u7f13\u51b2\u533a\u540e\uff0c\u6211\u4eec\u53c8\u8981\u8c03\u7528<code>glVertexAttribPointer</code>\uff0c\u53bb\u89e3\u91ca\u6b64\u65f6\u7ed1\u5b9a\u7684\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5e03\u5c40\u662f\u600e\u4e48\u6837\u7684</li> </ul> <p>\u201c\u9876\u70b9\u6570\u7ec4\u201d\u80fd\u591f\u8bb0\u5f55\u9876\u70b9\u7f13\u51b2\u533a\u7684\u72b6\u6001\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u4e00\u4e2a\u9876\u70b9\u6570\u7ec4\u4f1a\u8bb0\u5f55</p> <ol> <li>\u6b64\u9876\u70b9\u6570\u7ec4\u7684\u7f13\u51b2\u533a\u662f\u54ea\u4e2a</li> <li>\u6b64\u7f13\u51b2\u533a\u7684\u5185\u5b58\u5e03\u5c40\u662f\u600e\u4e48\u6837\u7684</li> </ol> <p>\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u9876\u70b9\u6570\u7ec4\uff0c\u5728\u7ed8\u5236\u65f6\uff0c\u7531\u539f\u5148\u7684\u4e24\u5927\u6b65\uff0c\u7b80\u5316\u6210\u4e86\u4e00\u6b65\u3002</p> <p></p>"},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#_2","title":"\u9876\u70b9\u6570\u7ec4","text":"<p>\u9876\u70b9\u6570\u7ec4</p> <ul> <li>\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u901a\u8fc7\u7279\u5b9a\u89c4\u8303\uff0c\u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u7684\u65b9\u5f0f</li> <li>\u201c\u9876\u70b9\u6570\u7ec4\u201d\u662fOpenGL\u7684\u7279\u4ea7\uff0cDirectX\u7b49\u5176\u4ed6\u6e32\u67d3\u63a5\u53e3\u4e2d\u5e76\u4e0d\u5b58\u5728\u8fd9\u4e2a\u6982\u5ff5</li> </ul> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6b63\u786e\u4f7f\u7528\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\uff0c\u4e0d\u4ec5\u5199\u4ee3\u7801\u65b9\u4fbf\uff0c\u6027\u80fd\u8fd8\u4f1a\u5f97\u5230\u63d0\u5347\u3002 \u4f8b\u5982\uff0c\u4e3a\u51e0\u4f55\u4f53\u7684\u6bcf\u4e2a\u90e8\u5206\u521b\u5efa\u4e0d\u540c\u7684\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\uff0c\u5728\u5207\u6362\u51e0\u4f55\u4f53\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u7ed1\u5b9a\u5176\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u5373\u53ef\u3002</p>"},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#_3","title":"\u9876\u70b9\u6570\u7ec4\u662f\u5fc5\u987b\u7684","text":""},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#_4","title":"\u517c\u5bb9\u6027\u914d\u7f6e\u6587\u4ef6","text":"<p>\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u662f\u5fc5\u987b\u7684\u3002\u867d\u7136\u5728\u4e4b\u524d\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u90fd\u6ca1\u6709\u521b\u5efa\u5b83\u3002 \u8fd9\u662f\u56e0\u4e3a\uff0cOpenGL\u9ed8\u8ba4\u4f7f\u7528\u7684\u662f\u201c\u517c\u5bb9\u6027\u914d\u7f6e\u6587\u4ef6\u201d\uff0c\u5b83\u4f1a\u5e2e\u6211\u4eec\u521b\u5efa\u5e76\u7ef4\u62a4\u4e00\u4e2a\u9ed8\u8ba4\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> <pre><code>//\u5e0c\u671bOpenGL\u7684\u7248\u672c\u662f3.3\nglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\nglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n//\u4f7f\u7528\u201c\u517c\u5bb9\u6027\u914d\u7f6e\u6587\u4ef6\u201d\uff08\u9ed8\u8ba4\u5c31\u662f\u8fd9\u4e2a\uff09\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_COMPAT_PROFILE);\n</code></pre>"},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#_5","title":"\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6","text":"<p>\u7136\u800c\uff0c\u201c\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\u201d\u5374\u6ca1\u6709\u8fd9\u4e2a\u7b56\u7565\uff0c\u201c\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\u201d\u4e0d\u4f1a\u5e2e\u6211\u4eec\u521b\u5efa\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u9876\u70b9\u6570\u7ec4\u3002</p> <pre><code>//\u5e0c\u671bOpenGL\u7684\u7248\u672c\u662f3.3\nglfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\nglfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n//\u4f7f\u7528\u201c\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\u201d\nglfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n</code></pre> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5728\u524d\u9762\u52a0\u4e0a\u4e86\u4f7f\u7528\u201c\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\u201d\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5c31\u4f1a\u7f16\u8bd1\u51fa\u9519\u3002\u9519\u8bef\u78011282\uff0c</p> <p></p> <p>\u603b\u4e4b\uff0c\u82e5\u662f\u201c\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\u201d\uff0c\u6211\u4eec\u5c31\u9700\u8981\u663e\u5f0f\u5730\u521b\u5efaOpenGL\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u3002\u5728\u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u524d\uff0c\u521b\u5efa\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u5373\u53ef\uff0c\u4f8b\u5982\uff1a <pre><code>//\u521b\u5efa\u4e00\u4e2a\u9876\u70b9\u6570\u7ec4\nunsigned int vao;\nGLCall(glGenVertexArrays(1, &amp;vao));\n//\u7ed1\u5b9a\u9876\u70b9\u6570\u7ec4\uff08\u4e4b\u540e\u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u3001\u6307\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u7684\u64cd\u4f5c\uff0c\u90fd\u4f1a\u8bb0\u5f55\u5728vao\u4e0a\uff09\nGLCall(glBindVertexArray(vao));\nunsigned int buffer;\nGLCall(glGenBuffers(1, &amp;buffer));\nGLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));\n//...\n</code></pre></p>"},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#_6","title":"\u4f7f\u7528\u9876\u70b9\u6570\u7ec4","text":"<pre><code>//...\nint main(void)\n{\n//...\nfloat positions[] =\n{                  //\u7d22\u5f15\u53f7\n-0.5f, -0.5f,  //0\uff0c\u4ece0\u5f00\u59cb\n0.5f, -0.5f,  //1\n0.5f,  0.5f,  //2\n-0.5f,  0.5f   //3\n};\nunsigned int indices[] =\n{\n0, 1, 2, //\u7b2c1\u4e2a\u4e09\u89d2\u5f62\n2, 3, 0  //\u7b2c2\u4e2a\u4e09\u89d2\u5f62\n};\n//\u521b\u5efa\u4e00\u4e2a\u9876\u70b9\u6570\u7ec4\nunsigned int vao;\nGLCall(glGenVertexArrays(1, &amp;vao));\n//\u7ed1\u5b9a\u9876\u70b9\u6570\u7ec4\uff08\u4e4b\u540e\u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u3001\u6307\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u5e03\u5c40\u7684\u64cd\u4f5c\uff0c\u90fd\u4f1a\u8bb0\u5f55\u5728vao\u4e0a\uff09\nGLCall(glBindVertexArray(vao));\n//\u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\nunsigned int buffer;\nGLCall(glGenBuffers(1, &amp;buffer));\nGLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));\nGLCall(glBufferData(GL_ARRAY_BUFFER, 4 * 2 * sizeof(float), positions, GL_STATIC_DRAW));\n//\u89e3\u91ca\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5e03\u5c40\nGLCall(glEnableVertexAttribArray(0));\nGLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0));\n//...\n/* \u89e3\u7ed1 */\nGLCall(glBindVertexArray(0));\nGLCall(glBindBuffer(GL_ARRAY_BUFFER, 0));\nGLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0));\nwhile (!glfwWindowShouldClose(window))\n{\n//...\n//\u53ea\u9700\u7ed1\u5b9a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\nGLCall(glBindVertexArray(vao));\n//\u65e0\u9700\u518d\u505a\u8fd9\u4e24\u4e2a\u64cd\u4f5c\n//1. \u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\n//GLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));\n//2. \u6307\u5b9a\u9876\u70b9\u7f13\u51b2\u533a\u7684\u5e03\u5c40\n//GLCall(glEnableVertexAttribArray(0));\n//GLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0));\n//...\n}\nGLCall(glDeleteProgram(shader));\nglfwTerminate();\nreturn 0;\n}\n</code></pre>"},{"location":"1LearnChernoOpenGL/08%20%E9%A1%B6%E7%82%B9%E6%95%B0%E7%BB%84/#1n","title":"1\u4e2a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\uff0c\u8fd8\u662fN\u4e2a","text":"<p>\u5f53\u524d\u7684\u4ee3\u7801\u4e2d\uff0c\u53ea\u662f\u4e00\u4e2aHelloWorld\u3002</p> <p>\u5728\u5b9e\u9645\u5de5\u7a0b\u5e94\u7528\u5f53\u4e2d\uff0c\u54ea\u79cd\u7b56\u7565\u66f4\u4f18\u5462\uff1f</p> <ol> <li>\u5168\u5c40\u59cb\u7ec8\u53ea\u7ed1\u5b9a\u4e00\u4e2a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u3002\u5f53\u7ed8\u5236\u67d0\u4e2a\u7f51\u683c\u65f6\uff0c\u518d\u7ed1\u5b9a\u9876\u70b9\u7f13\u51b2\u6570\u7ec4\u4e0e\u89e3\u91ca\u5e03\u5c40</li> <li>\u4e00\u4e2a\u7f51\u683c\u4e00\u4e2a\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u3002\u5f53\u7ed8\u5236\u67d0\u4e2a\u7f51\u683c\u65f6\uff0c\u7ed1\u5b9a\u7f51\u683c\u5bf9\u5e94\u7684\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61\u5373\u53ef</li> </ol> <p>\u7b54\u6848\u662f\u89c6\u60c5\u51b5\u800c\u5b9a</p> <ul> <li>\u9700\u8981\u5728\u4f60\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u505a\u6d4b\u8bd5\u624d\u80fd\u786e\u5b9a\uff0c</li> <li>\u9700\u8981\u63a7\u5236\u7684\u53d8\u91cf\u6709\uff1a\u5e73\u53f0\u3001\u8bbe\u5907\u3001\u663e\u5361\uff0c\u751a\u81f3\u662f\u9a71\u52a8\u7684\u7248\u672c\uff08\u56e0\u4e3aOpenGL\u51fd\u6570\u7684\u5b9e\u73b0\u4e0d\u4e00\u6837\uff09</li> </ul>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/","title":"10 \u7eb9\u7406","text":""},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#gpu","title":"GPU\u6240\u652f\u6301\u7684\u7eb9\u7406\u4e2a\u6570","text":"<p>GPU\u6240\u652f\u6301\u7684\u7eb9\u7406\u4e2a\u6570</p> <ol> <li>\u5728Windows\u4e0a\uff0c\u5178\u578b\u7684\u73b0\u4ee3\u663e\u5361\uff0c\u670932\u4e2a\u7eb9\u7406\u63d2\u69fd\uff08textures slots\uff09</li> <li>\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\uff0c\u6bd4\u5982\u5b89\u5353\u6216\u8005iPhone\uff0c\u53ef\u80fd\u67098\u4e2a\u63d2\u69fd\uff0c\u8fd9\u53d6\u51b3\u4e8e\u663e\u5361\u3001\u4ee5\u53caOpenGL\u7684\u5177\u4f53\u5b9e\u73b0</li> </ol>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_1","title":"\u5782\u76f4\u7ffb\u8f6c\u7eb9\u7406","text":"<p>OpenGL\u7684\u7eb9\u7406\u50cf\u7d20\u662f\u4ece \u5de6\u4e0b\u89d2 \u5f00\u59cb\u7684\uff0c\u4e0d\u662f\u5728\u5de6\u4e0a\u89d2</p> <ul> <li>OpenGL\u7eb9\u7406\u7684\u5de6\u4e0b\u89d2\u5750\u6807\u662f(0, 0)</li> <li>OpenGL\u7eb9\u7406\u7684\u53f3\u4e0a\u89d2\u5750\u6807\u662f(1, 1)</li> </ul> <p>\u7136\u800cpng\u56fe\u50cf\u7684\u5750\u6807\u662f\u4ece \u5de6\u4e0a\u89d2 \u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5bf9png\u56fe\u50cf\u505a\u5782\u76f4\uff08\u4e0a\u4e0b\uff09\u7ffb\u8f6c\u4e4b\u540e\uff0c\u624d\u80fd\u4e22\u7ed9OpenGL\u3002</p> <p>\u5982\u4f55\u7ffb\u8f6c\u56fe\u50cf</p> <ol> <li>\u53ef\u4ee5\u81ea\u5df1\u624b\u5199\u4ee3\u7801\uff0c\u5c06\u50cf\u7d20\u8c03\u6362\u4e00\u4e0b\u4f4d\u7f6e</li> <li><code>stb_image</code>\u7b2c\u4e09\u65b9\u5e93\u652f\u6301\u5728\u52a0\u8f7d\u56fe\u50cf\u65f6\uff0c\u5782\u76f4\u7ffb\u8f6c\u7eb9\uff1a<code>stbi_set_flip_vertically_on_load(1);</code></li> </ol>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#shader","title":"\u5728Shader\u4e2d\u4f7f\u7528\u7eb9\u7406","text":""},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#1","title":"1. \u5728\u9876\u70b9\u6570\u636e\u4e2d\u6dfb\u52a0\u7eb9\u7406\u5750\u6807","text":"<pre><code>//\u9876\u70b9\u6570\u636e\nfloat positions[] = {\n//\u9876\u70b9\u4f4d\u7f6exy, UV\u5750\u6807xy\n-0.5f, -0.5f, 0.0f, 0.0f,  // 0\n0.5f, -0.5f, 1.0f, 0.0f,   // 1\n0.5f,  0.5f, 1.0f, 1.0f,   // 2\n-0.5f,  0.5f, 0.0f, 1.0f   // 3\n};\n//\u9876\u70b9\u7f13\u51b2\u533a\nVertexBuffer vb(positions, 4 * 4 * sizeof(float));\n</code></pre>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#2-openglgpu","title":"2. \u8bfb\u53d6\u7eb9\u7406\uff0c\u5e76\u901a\u8fc7OpenGL\u4f20\u5165GPU","text":"<pre><code>Texture texture(\"res/textures/ChernoLogo.png\");\ntexture.Bind(0);                        //\u7ed1\u5b9a\u7b2c0\u4e2a\u7eb9\u7406\u69fd\nshader.SetUniform1i(\"u_Texture\", 0);    //\u4f20\u503c\u7ed9\u7740\u8272\u5668\uff0c\u5c06\u4f7f\u7528\u7eb9\u7406\u69fd\u7684\u5e8f\u53f7\u7ed9u_Texture\u53d8\u91cf\n</code></pre> <p>Texture\u7c7b\u7684\u5177\u4f53\u5b9e\u73b0 <pre><code>class Texture\n{\nprivate:\nunsigned int m_RendererID;\nstd::string m_FilePath;\nunsigned char* m_LocalBuffer;   //\u5185\u5b58\u5f53\u4e2d\u5b58\u50a8\u7eb9\u7406\nint m_Width, m_Height;\nint m_BPP;  //bits per-pixel, \u6bcf\u4e2a\u50cf\u7d20\u7684\u6bd4\u7279\u5927\u5c0f\npublic:\nTexture(const std::string&amp; path);\n~Texture();\nvoid Bind(unsigned int slot = 0) const;\nvoid Unbind() const;\ninline int GetWidth() const { return m_Width; }\ninline int GetHeight() const { return m_Height; }\n};\n</code></pre> <pre><code>#include \"Texture.h\"\n#include \"vender/stb_image/stb_image.h\"\nTexture::Texture(const std::string&amp; path)\n:m_RendererID(0), m_FilePath(path), m_LocalBuffer(nullptr), m_Width(0), m_Height(0), m_BPP(0)\n{\nstbi_set_flip_vertically_on_load(1); //\u5782\u76f4\u7ffb\u8f6c\u7eb9\u7406 \nm_LocalBuffer = stbi_load(path.c_str(), &amp;m_Width, &amp;m_Height, &amp;m_BPP, 4);\n//\u60f3\u8981\u4f7f\u7528RGBA\uff0c\u5219\u4f20\u51654\nGLCall(glGenTextures(1, &amp;m_RendererID));            //\u751f\u6210\u4e00\u4e2a\u7eb9\u7406\nGLCall(glBindTexture(GL_TEXTURE_2D, m_RendererID)); //\u7ed1\u5b9a\u7eb9\u7406\nGLCall(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR));   //\u7f29\u5c0f\u8fc7\u6ee4\u5668 \u7ebf\u6027\u91cd\u91c7\u6837\nGLCall(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR));   //\u653e\u5927\u8fc7\u6ee4\u5668 \u7ebf\u6027\u91cd\u91c7\u6837\n/*\u201c\u5d4c\u5165\u6a21\u5f0f\u201dor\u201c\u73af\u7ed5\u6a21\u5f0f\u201d\n    1. GL_CLAMP_TO_EDGE \u5d4c\u5165 \u4e0d\u5e0c\u671b\u5b83\u6269\u5927\u533a\u57df\n    2. \u5e73\u94fa\n     */\nGLCall(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE));    //\u6c34\u5e73\u73af\u7ed5(S\u76f8\u5f53\u4e8eX) \nGLCall(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE));    //\u5782\u76f4\u73af\u7ed5(T\u76f8\u5f53\u4e8eY)\n//\u6ce8\uff1a\u5982\u679c\u4e0d\u8bbe\u7f6e\u8fd9\u56db\u4e2a\u53c2\u6570\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u9ed1\u8272\u7684\u7eb9\u7406\u3002\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u9ed8\u8ba4\u503c\n//\u5c06\u6570\u636e\u62f7\u8d1d\u5230GPU\u4e0a\nGLCall(glTexImage2D(\nGL_TEXTURE_2D,      //\u7eb9\u7406\u7c7b\u578b\n0,                  //level=0\uff0c\u8868\u793a\u5b83\u4e0d\u662f\u4e00\u4e2a\u590d\u5408\u7eb9\u7406\nGL_RGBA8,           //\u4f60\u5e0c\u671bOpenGL\u5728GPU\u4e2d\u5982\u4f55\u5b58\u50a8\u4f60\u7684\u7eb9\u7406 =&gt; \u6309\u7167RGBA8\u6765\u5b58\u50a8\nm_Width, m_Height,  //\u5bbd\u9ad8\n0,                  //\u50cf\u7d20\u8fb9\u6846=0\nGL_RGBA,            //\u4f20\u7ed9GPU\u6570\u636e\u7684\u683c\u5f0f\u662f\u4ec0\u4e48 =&gt; RGBA\u56db\u4e2a\u901a\u9053\nGL_UNSIGNED_BYTE,   //\u4f20\u7ed9GPU\u6570\u636e\u7684\u7c7b\u578b =&gt; \u6bcf\u4e2a\u901a\u9053\u662f\u4e00\u4e2aunsigned byte\nm_LocalBuffer       //\u6570\u636e\uff08\u4e5f\u53ef\u4ee5\u4f20nullptr\uff0c\u8fd9\u8868\u793a\u5148\u5206\u914d\u663e\u5b58\uff0c\u5230\u540e\u9762\u518d\u62f7\u8d1d\uff09\n)); GLCall(glBindTexture(GL_TEXTURE_2D, 0)); //\u89e3\u9664\u7ed1\u5b9a\nif (m_LocalBuffer) {\nstbi_image_free(m_LocalBuffer); //\u5220\u9664\u5185\u5b58\u4e2d\u7684\u6570\u636e\nm_LocalBuffer = nullptr;\n}\n}\nTexture::~Texture()\n{\nGLCall(glDeleteTextures(1, &amp;m_RendererID));\nif (m_LocalBuffer)\n{\nstbi_image_free(m_LocalBuffer); //\u5220\u9664\u5185\u5b58\u4e2d\u7684\u6570\u636e\nm_LocalBuffer = nullptr;\n}\n}\nvoid Texture::Bind(unsigned int slot) const\n{\n//\u6fc0\u6d3b\u7b2cslot\u4e2a\u7eb9\u7406\u69fd\uff08\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u4e2a\u7eb9\u7406\u5c06\u7ed1\u5b9a\u5230\u7b2cslot\u4e2a\u7eb9\u7406\u69fd\u4e0a\uff09\nGLCall(glActiveTexture(GL_TEXTURE0 + slot));\n//\u5c06m_RendererID\u7eb9\u7406\uff0c\u7ed1\u5b9a\u5230\u6fc0\u6d3b\u7684\u69fd\u91cc\uff08\u4e5f\u5c31\u662f\u7b2cslot\u4e2a\u7eb9\u7406\u69fd\u4e2d\uff09\nGLCall(glBindTexture(GL_TEXTURE_2D, m_RendererID));\n//\u6ce8\uff1a\u867d\u7136\u7eb9\u7406\u69fd\u8303\u56f4\u662f[GL_TEXTURE0, GL_TEXTURE31]\uff0c\u4f46\u4e0d\u4e00\u5b9a\u4f60\u7684\u663e\u5361\u652f\u6301\uff0c\u8fd9\u8fd8\u662f\u53d6\u51b3\u4e8e\u4f60\u7684\u663e\u5361\n//    \u670932\u4e2a\uff0c\u662f\u56e0\u4e3a32\u662fOpenGL\u89c4\u683c\u5141\u8bb8\u7684\u6700\u5927\u503c\n}\nvoid Texture::Unbind() const\n{\nGLCall(glBindTexture(GL_TEXTURE_2D, 0));\n}\n</code></pre></p>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#3-shader","title":"3. \u5728Shader\u4e2d\u4f7f\u7528\u7eb9\u7406","text":"<pre><code>#shader vertex\n#version 330 core\n//\u9876\u70b9\u6570\u636e\nlayout(location = 0)in vec4 position;   //\u9876\u70b9\u4f4d\u7f6e\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u662fvec4\uff09\nlayout(location = 1)in vec2 texCoord;   //UV\u5750\u6807\nout vec2 v_TexCoord; //\u8f93\u51fa\u53d8\u91cf\u3002\u9876\u70b9\u7740\u8272\u5668\u7684\u8f93\u51fa\uff0c\u5c06\u4f1a\u4f5c\u4e3a\u7247\u5143\u7740\u8272\u5668\u7684\u8f93\u5165\nvoid main()\n{\ngl_Position = position;\nv_TexCoord = texCoord;\n};\n#shader fragment\n#version 330 core\nlayout(location = 0)out vec4 color;\nin vec2 v_TexCoord; //\u7531\u9876\u70b9\u7740\u8272\u5668\u4f20\u5165\nuniform sampler2D u_Texture;\n//sampler2D\u4e3a\u4e8c\u7ef4\u7684\u7eb9\u7406\u56fe\n//OpenGL\u53ea\u9700\u8bbe\u7f6e\u7eb9\u7406\u69fd\u7684Id\u5373\u53ef\uff0csampler2D\u5373\u4f1a\u53d6\u5230\u5bf9\u5e94\u7684\u7eb9\u7406\nvoid main()\n{\nvec4 texColor = texture(u_Texture, v_TexCoord); //\u5bf9\u6307\u5b9a\u7eb9\u7406\u5750\u6807\u8fdb\u884c\u91c7\u6837\ncolor = texColor;\n};\n</code></pre>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#4","title":"4. \u6dfb\u52a0\u7eb9\u7406\u6df7\u5408","text":"<pre><code>//# \u5b9a\u4e49OpenGL\u5982\u4f55\u6df7\u5408alpha\u50cf\u7d20\nGLCall(glEnable(GL_BLEND)); //\u542f\u7528\u6df7\u5408\nGLCall(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));  //RGBA = SrcRgba * GL_SRC_ALPHA + DestRgba * GL_ONE_MINUS_SRC_ALPHA\n</code></pre>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_2","title":"\u7eb9\u7406\u6df7\u5408","text":""},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_3","title":"\u5f15\u8a00","text":"<p>\u5728\u56fe\u5f62\u5b66\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u8981\u6e32\u67d3\u4e00\u4e9b\u90e8\u5206\u6216\u5b8c\u5168\u900f\u660e\u7684\u4e1c\u897f\uff0c\u4f8b\u5982</p> <ol> <li>\u6709\u8272\u73bb\u7483\uff1a\u53ea\u80fd\u900f\u8fc7\u67d0\u79cd\u989c\u8272</li> <li>\u5177\u6709\u900f\u660e\u901a\u9053\u7684\u56fe\u7247\uff1a\u900f\u660e\u7684\u50cf\u7d20\u4e0d\u6e32\u67d3</li> </ol> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOpenGL\u4e0d\u6267\u884c\u4efb\u4f55\u6df7\u5408\uff0c\u4f1a\u5c06\u56fe\u7247\u6e32\u67d3\u6210\u4e0d\u900f\u660e\u7684\u4e1c\u897f\u3002</p> <ol> <li>\u5982\u5de6\u56fe\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u544a\u8bc9OpenGL \u5904\u7406\u900f\u660e\u5ea6\u7684\u7b56\u7565 \uff0c\u90a3\u4e48\u5b83\u6e32\u67d3\u7684\u7ed3\u679c\u5c06\u4e0d\u4f1a\u662f\u4f60\u60f3\u8981\u7684</li> <li>\u53f3\u56fe\u5c31\u6b63\u786e\u8bbe\u7f6e\u4e86\u5904\u7406\u900f\u660e\u5ea6\u7684\u7b56\u7565\uff0c\u7ed3\u679c\u662f\u6b63\u786e\u7684</li> </ol> <p> </p>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_4","title":"\u4ec0\u4e48\u662f\u6df7\u5408\uff1f","text":"<p>\u4f8b\u5982\uff0c\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u6709\u4e24\u5757\u6709\u8272\u73bb\u7483\uff0c\u4e00\u4e2a\u662f\u7ea2\u8272\uff0c\u4e00\u4e2a\u662f\u84dd\u8272\uff0c\u84dd\u8272\u73bb\u7483\u538b\u5728\u7ea2\u8272\u73bb\u7483\u4e0a\u9762</p> <ol> <li>\u56e0\u4e3a\u84dd\u8272\u538b\u76d6\u5728\u7ea2\u8272\u73bb\u7483\u4e0a\u9762\uff0c\u56e0\u6b64\u6e32\u67d3\u987a\u5e8f\u662f\uff1a\u5148\u7ea2\u8272\u73bb\u7483\uff0c\u518d\u84dd\u8272\u73bb\u7483</li> <li>\u9996\u5148\uff0c\u5148\u6e32\u67d3\u7ea2\u8272\u73bb\u7483\uff0c\u6e32\u67d3\u7ed3\u679c\u80af\u5b9a\u662f\u7ea2\u8272\u3002\u7136\u540e\u5c06\u5176\u5b58\u50a8\u5728\u76ee\u6807\u7f13\u51b2\u533a(Target buffer)\u5f53\u4e2d\u3002\u5728\u6df7\u5408\u7684\u8bed\u5883\u4e2d\uff0c\u4e4b\u524d\u6e32\u67d3\u7684\u65e7\u989c\u8272\u503c\u4e00\u822c\u79f0\u4e3adestination\uff08\u76ee\u6807\uff09</li> <li>\u5176\u6b21\uff0c\u6e32\u67d3\u84dd\u8272\u73bb\u7483\uff0c\u6e32\u67d3\u7ed3\u679c\u80af\u5b9a\u662f\u84dd\u8272\uff0c\u6b64\u65f6\u5c31\u9047\u5230\u4e86\u5982\u4f55\u4e0e\u539f\u5148\u989c\u8272\uff08\u7ea2\u8272\uff09\u6df7\u5408\u7684\u95ee\u9898\u3002\u5728\u6df7\u5408\u7684\u8bed\u5883\u4e2d\uff0c\u5f53\u524d\u6e32\u67d3\u7684\u989c\u8272\u503c\u88ab\u79f0\u4e3asource\uff08\u6e90\uff09\uff0c\u6216\u8f93\u51fa\u989c\u8272\u3002</li> </ol> <p></p> <p>\u56e0\u6b64\uff0c\u6df7\u5408\u51b3\u5b9a\u4e86\u5982\u4f55\u5c06 \u8f93\u51fa\u989c\u8272(output) \u4e0e \u4e4b\u524d\u7684\u989c\u8272(target buffer) \u8fdb\u884c\u7ed3\u5408\u3002</p>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_5","title":"\u542f\u7528\u6df7\u5408","text":"<p>\u9ed8\u8ba4\u662f\u7981\u7528</p> <ol> <li><code>glEnable(GL_BLEND)</code></li> <li><code>glEnable(GL_BLEND)</code></li> </ol>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_6","title":"\u6df7\u5408\u8272\u8ba1\u7b97\u65b9\u5f0f","text":"<p>\u6307\u5b9a\u6df7\u5408\u8272\u8ba1\u7b97\u65b9\u5f0f\u7684API\uff1a<code>glBlendFunc(src_factor, dest_factor)</code></p> <p>\u5176\u5bf9\u5e94\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a<code>\u4e24\u4e2a\u989c\u8272\u7684\u6df7\u5408\u7ed3\u679c = src * src_factor + dest * dest_factor</code></p> <ul> <li><code>src_factor</code>\uff1asource\u7684\u56e0\u5b50\uff0c\u9ed8\u8ba4\u4e3a<code>GL_ONE</code></li> <li><code>dest_factor</code>\uff1adest\u7684\u56e0\u5b50\uff0c\u9ed8\u8ba4\u4e3a<code>GL_ZERO</code></li> </ul> <p>\u4e8b\u5b9e\u4e0a\uff0csrc_factor\u3001dest_factor\u7684\u56e0\u5b50\u4e5f\u53ef\u4ee5\u53ea\u4f5c\u7528\u4e8eRGB\u3001RGBA\u3001R\u3001G\u3001B\u3001RG\u7b49\u7b49\u3002</p> <p>\u4f8b\uff1a<code>glBlendFunc(GL_ONE, GL_ZERO)</code></p> <ol> <li><code>GL_ONE</code>\uff1a\u53d6\u989c\u8272\u7684RGBA\u7684\u901a\u9053\uff0c\u7136\u540e<code>\u00d71</code></li> <li><code>GL_ZERO</code>\uff1a\u53d6\u989c\u8272\u7684RGBA\u7684\u901a\u9053\uff0c\u7136\u540e<code>\u00d70</code></li> <li>\u56e0\u6b64\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a<code>result = src * 1 + dest * 0</code></li> <li>\u4e8b\u5b9e\u4e0a\uff0c\u8ba1\u7b97\u7ed3\u679c\u662f\u65b0\u7684\u6e32\u67d3\u7ed3\u679c\uff0c\u5b83\u4f1a\u628a\u65e7\u7684\u6e32\u67d3\u7ed3\u679c\u8fdb\u884c\u8986\u76d6</li> </ol>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_7","title":"\u6df7\u5408\u6a21\u5f0f","text":"<p>\u6307\u5b9a\u6df7\u5408\u7684\u6a21\u5f0f\uff1a<code>glBlendEquation(mode)</code></p> <ul> <li><code>mode</code>\uff1a\u5982\u4f55\u7ec4\u7ec7src\u548cdest\u7684\u989c\u8272\uff0c\u4e5f\u5c31\u662f\u4e0a\u9762\u516c\u5f0f\u4e2d\u7684\u8fd0\u7b97\u7b26\uff0c\u9ed8\u8ba4\u662f<code>GL_FUNC_ADD</code>\uff0c\u4e5f\u5c31\u662f<code>+</code>\u53f7</li> </ul>"},{"location":"1LearnChernoOpenGL/10%20%E7%BA%B9%E7%90%86/#_8","title":"\u6df7\u8272\u793a\u4f8b","text":"<p>\u4e00\u3001alpha=0\uff0c\u5219\u4fdd\u7559dest\u7684\u989c\u8272</p> <ol> <li><code>src_factor  = GL_SRC_ALPHA</code></li> <li><code>dest_factor = GL_ONE_MINUS_SRC_ALPHA</code></li> <li><code>mode        = GL_FUNC_ADD</code></li> </ol> <p></p> <p>\u4e8c\u3001\u90e8\u5206\u900f\u660e</p> <ul> <li><code>src  = (1.0, 1.0, 1.0, 0.5)</code> \u767d\u8272\u73bb\u7483\uff0c\u4f46\u900f\u660e\u5ea60.5</li> <li><code>dest = (1.0, 0.0, 1.0, 1.0)</code> \u6d0b\u7ea2\u8272\u957f\u65b9\u5f62</li> </ul> <p></p>"},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/","title":"11 \u6570\u5b66\u5e93\u4e0e\u6295\u5f71\u77e9\u9635","text":""},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#_1","title":"\u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\u7cfb","text":""},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#_2","title":"\u5f15\u8a00","text":"<p>\u6211\u4eec\u5148\u505a\u51e0\u4e2a\u8bd5\u9a8c\u3002</p> <ol> <li> <p>\u5728\u539f\u5148\u7684\u4ee3\u7801\u4e2d\uff0c\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u662f0.5 <pre><code>//\u9876\u70b9\u6570\u636e\nfloat positions[] = {\n//\u9876\u70b9\u4f4d\u7f6exy, UV\u5750\u6807xy\n-0.5f, -0.5f, 0.0f, 0.0f,   // 0\n0.5f, -0.5f, 1.0f, 0.0f,    // 1\n0.5f,  0.5f, 1.0f, 1.0f,    // 2\n-0.5f,  0.5f, 0.0f, 1.0f    // 3\n};\n</code></pre> </p> </li> <li> <p>\u5c06\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u6539\u62101 <pre><code>//\u9876\u70b9\u6570\u636e\nfloat positions[] = {\n//\u9876\u70b9\u4f4d\u7f6exy, UV\u5750\u6807xy\n-1.0f, -1.0f, 0.0f, 0.0f,   // 0\n1.0f, -1.0f, 1.0f, 0.0f,    // 1\n1.0f,  1.0f, 1.0f, 1.0f,    // 2\n-1.0f,  1.0f, 0.0f, 1.0f    // 3\n};\n</code></pre> </p> </li> <li> <p>\u5c06\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u6539\u62102 <pre><code>//\u9876\u70b9\u6570\u636e\nfloat positions[] = {\n//\u9876\u70b9\u4f4d\u7f6exy, UV\u5750\u6807xy\n-2.0f, -2.0f, 0.0f, 0.0f,   // 0\n2.0f, -2.0f, 1.0f, 0.0f,    // 1\n2.0f,  2.0f, 1.0f, 1.0f,    // 2\n-2.0f,  2.0f, 0.0f, 1.0f    // 3\n};\n</code></pre> </p> </li> </ol> <p>\u4e0d\u96be\u53d1\u73b0\uff0c\u65e0\u8bba\u6211\u4eec\u600e\u4e48\u66f4\u6539\u9876\u70b9\u7684\u5750\u6807\u503c\uff0c\u5728\u7a97\u53e3\u4e2d\uff0c\u6bcf\u6b21\u53ea\u663e\u793a\u4e86x\u2208[-1, 1]\uff0cy\u2208[-1, 1]\u7684\u5185\u5bb9\u3002</p> <p>\u56de\u60f3\uff0c\u5728\u8fd9\u4efd\u4ee3\u7801\u4e2d\uff08basic.shader\uff09\uff0c<code>positions</code>\u7684\u9876\u70b9\u5750\u6807\u76f4\u63a5\u8d4b\u503c\u7ed9\u4e86<code>gl_Position</code> <pre><code>#shader vertex\n//...\nvoid main()\n{\ngl_Position = position;\nv_TexCoord = texCoord;\n};\n#shader fragment\n//...\n</code></pre></p> <p>\u56e0\u6b64\uff0c\u5f15\u51fa\u4e86\u4e00\u4e2a\u80cc\u666f\u77e5\u8bc6\uff1a<code>gl_Position</code>\u5b9e\u9645\u4e0a\u88abGPU\u5f53\u6210 [-1, 1] \u7684\u5750\u6807\uff08\u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\uff09\u8fdb\u884c\u5904\u7406\u4e86\u3002GPU\u5728\u4e4b\u540e\uff0c\u4f1a\u5c06**\u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\u7cfb** \u6620\u5c04\u6210 \u5c4f\u5e55\u5750\u6807\u7cfb\uff0c\u4ece\u800c\u7ed8\u5236\u5230\u6211\u4eec\u7684\u5c4f\u5e55\u4e0a\u3002</p>"},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#_3","title":"\u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\u7cfb","text":"<p>\u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\u7cfb\uff08normalized device coordinate system, NDC\uff09</p> <ul> <li>\u662f\u4e00\u4e2a\u4e8c\u7ef4\u7684\u7a7a\u95f4\u76f4\u89d2\u5750\u6807\u7cfb</li> <li>\u5b83\u7684X\u3001Y\u7684\u8303\u56f4\u90fd\u5728[-1, 1]\u4e4b\u95f4</li> </ul> <p></p> <p>GPU\u5c31\u4f1a\u5c06 \u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\u7cfb \u6620\u5c04\u6210 \u5c4f\u5e55\u5750\u6807\u7cfb\uff08window device coordinate system\uff09\uff0c\u4ece\u800c\u5c06\u6211\u4eec\u7684\u56fe\u6848\u663e\u793a\u5230\u5c4f\u5e55\u5f53\u4e2d\u3002</p>"},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#glm","title":"glm\u6570\u5b66\u5e93","text":"<p>glm\u7b2c\u4e09\u65b9\u5e93\u7684\u5168\u7a0b\u53eb\u505aOpenGL Mathematics\u3002Yes\uff0c\u5b83\u5c31\u662fOpenGL\u7684\u6570\u5b66\u5e93\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u6807\u51c6\u90fd\u662f\u57fa\u4e8eOpenGL\u6807\u51c6\u7f16\u5199\u7684\u3002glm\u65e8\u5728\u6a21\u4effGLSL\u5e76\u4e0eOpenGL\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u4f8b\u5982\uff1aglm\u77e9\u9635\u7684\u5185\u5b58\u5e03\u5c40\u4e0eOpenGL\u4e00\u81f4\uff0c\u90fd\u662f\u6309\u5217\u4f18\u5148\u6765\u5b58\u50a8\u7684\uff01</p> <ul> <li>\u56e0\u6b64\u5728\u4f7f\u7528<code>glUniformMatrix4fv</code>\u65f6\uff0c\u5c31\u65e0\u9700\u8f6c\u7f6e\uff0c\u76f4\u63a5\u5c06<code>glm</code>\u7684\u77e9\u9635\u5185\u5b58\u62f7\u8d1d\u5230GPU\u5373\u53ef\u3002</li> </ul> <pre><code>void Shader::SetUniformMat4f(const std::string&amp; name, const glm::mat4&amp; matrix) {\nGLCall(\nglUniformMatrix4fv(\nGetUniformLocation(name),\n1,          //1\u4e2a\u77e9\u9635\nGL_FALSE,   //true\u9700\u8981\u8f6c\u7f6e\uff0cfalse\u4e0d\u9700\u8981\u8f6c\u7f6e\n&amp;matrix[0][0]  //\u4f20\u5165\u77e9\u9635\u7684\u5185\u5b58\u5730\u5740\n)\n);\n//f\u8868\u793afloat\n//v\u8868\u793a\u6211\u4eec\u5728\u4f20\u5165\u4e00\u4e2a\u6570\u7ec4    \n}\n</code></pre> <ul> <li>\u4f46\u5982\u679c\u5176\u4ed6\u6570\u5b66\u5e93\u662f\u4ee5\u884c\u4f18\u5148\u6765\u5b58\u50a8\u77e9\u9635\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4f20\u5165<code>GL_TRUE</code>\uff0cOpenGL\u4f1a\u81ea\u884c\u5bf9\u5176\u8fdb\u884c\u8f6c\u7f6e</li> </ul>"},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#_4","title":"\u6295\u5f71\u77e9\u9635","text":""},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#_5","title":"\u4ecb\u7ecd","text":"<p>\u5047\u8bbe\uff0c\u4f60\u6709\u4e00\u4e2a3D\u4e16\u754c\uff0c\u91cc\u9762\u6709\u5c71\u4e18\u3001\u5730\u5f62\u3001\u4eba\u7269\u3001\u5efa\u7b51\u7269\u7b49\u7b49\uff0c\u8fd9\u4e2a3D\u4e16\u754c\u662f\u4ee5\u4f55\u79cd\u65b9\u5f0f\u663e\u793a\u57282D\u7684\u5c4f\u5e55\u5f53\u4e2d\u7684\uff1f</p> <ul> <li>\u6295\u5f71\u77e9\u9635</li> </ul> <p>\u6295\u5f71\u77e9\u9635\uff0c\u672c\u8d28\u4e0a\u662f\u5c06\u4e09\u7ef4\u7a7a\u95f4\u6295\u5f71\u5230\u4e8c\u7ef4\u5c4f\u5e55\u4e0a\u7684\u77e9\u9635\uff0c\u5373\u5c06\u4e09\u7ef4\u5750\u6807\u8f6c\u6362\u4e3a\u6807\u51c6\u5316\u8bbe\u5907\u5750\u6807\u3002</p> <p>\u5b83\u6709\u4e24\u79cd\uff1a</p> <ol> <li>\u900f\u89c6\u6295\u5f71\uff1a\u8fd1\u5927\u8fdc\u5c0f\uff0c\u5e38\u7528\u4e8e3D\u4e16\u754c</li> <li>\u6b63\u4ea4\u6295\u5f71\uff1a\u8fdc\u8fd1\u4e00\u6837\uff0c\u5e38\u7528\u8bed2D\u4e16\u754c\u5f53\u4e2d\uff0c\u4f46\u662f3D\u4e2d\u4e5f\u4f1a\u6709\u5e94\u7528\uff08\u4f8b\u5982\u5173\u5361\u7f16\u8f91\u5668\u30013D\u5efa\u6a21\u7a0b\u5e8f\uff09</li> </ol> <p></p>"},{"location":"1LearnChernoOpenGL/11%20%E6%95%B0%E5%AD%A6%E5%BA%93%E4%B8%8E%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5/#_6","title":"\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u6295\u5f71\u77e9\u9635","text":"<ol> <li> <p>Application.cpp <pre><code>#include \"glm/gml.hpp\"\n#include \"glm/gtc/matrix_transform.hpp\"\nint main()\n{\n//...\nIndexBuffer ib(indices, 6);\n//\u6b63\u4ea4\u77e9\u9635\uff08\u628a\u6240\u6709\u5750\u6807\u6620\u5c04\u52302D\u5e73\u9762\u4e0a\uff0c\u79bb\u7684\u8fdc\u7684\u7269\u4f53\u5e76\u4e0d\u4f1a\u53d8\u5c0f\uff09\nglm::mat4 proj = glm::ortho(\n-2.0f, //\u5de6\u8fb9\n2.0f,  //\u53f3\u8fb9\n-1.5f, //\u5e95\u90e8\n1.5f,   //\u9876\u90e8\n-1.0f,  //\u8fdc\n1.0f    //\u8fd1\n);\n//x\u2208[-2, 2]\u4f1a\u88ab\u6620\u5c04\u5230NDC\u7684[-1, 1]\u4e0a\uff0c\u5176\u4ed6\u7684\u4f1a\u88ab\u5220\u6389\u3002\u56e0\u6b64x=0.5\u5373\u5728\u7a97\u53e3\u76841/4\u5904\n//y\u2208[-1.5, 1.5]\u4f1a\u88ab\u6620\u5c04\u5230NDC\u7684[-1, 1]\u4e0a\uff0c\u5176\u4ed6\u7684\u4f1a\u88ab\u5220\u6389\n//\u6ce8\uff1a\u9075\u5faa4x3\u7684\u7eb5\u6a2a\u6bd4\uff08\u5c06\u8fd9\u4e9b\u6570\u5b57\u4e58\u4ee52\uff0c\u5c31\u5f97\u5230\u4e864x3\uff09\n//\u9876\u90e8\u5230\u5e95\u90e8\u67093\u4e2a\u5355\u4f4d\u8ddd\u79bb\uff1b\u4ece\u5de6\u5230\u53f34\u4e2a\u5355\u4f4d\u8ddd\u79bb\n//...\nshader.SetUniformMat4f(\"u_MVP\", proj); //\u4f20\u5165\u7740\u8272\u5668\n}\n</code></pre></p> </li> <li> <p>basic.shader <pre><code>#shader vertex\n#version 330 core\nlayout(location = 0)in vec4 position;\nlayout(location = 1)in vec2 textCoord;\nout vec2 v_TextCoord;\nuniform mat4 u_MVP; //\u6a21\u578b\u89c6\u56fe\u77e9\u9635\uff0c\u76ee\u524d\u53ea\u4f20\u5165\u4e86\u4e00\u4e2a\u6295\u5f71\u77e9\u9635\nvoid main()\n{\ngl_Position = u_MVP * position; //\u5c06\u5750\u6807\u505a\u4e00\u4e2a\u6295\u5f71\u53d8\u6362\nv_TextCoord = textCoord;\n};\n#shader fragment\n#version 330 core\nlayout(location = 0)out vec4 color;\nin vec2 v_TextCoord;\nuniform vec4 u_Color;\nuniform sampler2D u_Texture;\nvoid main()\n{\nvec4 textColor = texture(u_Texture, v_TextCoord);\ncolor = textColor;\n};\n</code></pre></p> </li> <li> <p>shader.cpp <pre><code>//glm::mat4\u662f\u5217\u5f0f\u5b58\u50a8\uff0c\u800cOpenGL\u4e5f\u662f\u5217\u5f0f\u5b58\u50a8\uff0c\u56e0\u6b64\u65e0\u9700\u8f6c\u7f6e\n//\u5982\u679cmatrix\u662f\u884c\u5f0f\u5b58\u50a8\uff0c\u624d\u9700\u8981\u8f6c\u7f6e\nvoid Shader::SetUniformMat4f(const std::string&amp; name, const glm::mat4&amp; matrix) {\nGLCall(\nglUniformMatrix4fv(\nGetUniformLocation(name),\n1,          //1\u4e2a\u77e9\u9635\nGL_FALSE,   //true\u9700\u8981\u8f6c\u7f6e\uff0cfalse\u4e0d\u9700\u8981\u8f6c\u7f6e\n&amp;matrix[0][0]  //\u4f20\u5165\u77e9\u9635\u7684\u5185\u5b58\u5730\u5740\n)\n);\n//f\u8868\u793afloat\n//v\u8868\u793a\u6211\u4eec\u5728\u4f20\u5165\u4e00\u4e2a\u6570\u7ec4    \n}\n</code></pre></p> </li> </ol> <p>\u5728\u5b8c\u6210\u4ee3\u7801\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u51e0\u4e2a\u8bd5\u9a8c\u6765\u52a0\u6df1\u5bf9\u6295\u5f71\u77e9\u9635\u7684\u7406\u89e3</p> <ol> <li>\u6211\u4eec\u53ef\u4ee5\u5728CPU\u4e2d\u8ba1\u7b97\u6295\u5f71\u4e4b\u540e\u7684\u5750\u6807\u662f\u591a\u5c11\uff0c\u7136\u540e\u89c2\u5bdf\u8fd9\u4e2a\u70b9\u5728\u7a97\u53e3\u7684\u4f4d\u7f6e\u662f\u5426\u6b63\u786e</li> </ol> <pre><code>glm::vec4 vp(100, 100, 0, 1);\nglm::vec4 result = proj * vp;\n</code></pre> <ol> <li>\u66f4\u6539<code>glm::ortho</code>\u4e2dx\u3001y\u7684\u9608\u503c</li> </ol>"},{"location":"1LearnChernoOpenGL/12%20%E6%A8%A1%E5%9E%8B%E3%80%81%E8%A7%86%E5%9B%BE%E7%9F%A9%E9%98%B5/","title":"12 \u6a21\u578b\u3001\u89c6\u56fe\u77e9\u9635","text":""},{"location":"1LearnChernoOpenGL/12%20%E6%A8%A1%E5%9E%8B%E3%80%81%E8%A7%86%E5%9B%BE%E7%9F%A9%E9%98%B5/#_1","title":"\u6a21\u578b\u77e9\u9635","text":"<p>\u5bf9\u6a21\u578b\u8fdb\u884c\u504f\u79fb\u7684\u77e9\u9635\u3002</p>"},{"location":"1LearnChernoOpenGL/12%20%E6%A8%A1%E5%9E%8B%E3%80%81%E8%A7%86%E5%9B%BE%E7%9F%A9%E9%98%B5/#_2","title":"\u89c6\u56fe\u77e9\u9635","text":"<p>\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u5c71\u662f\u4e0d\u53d8\u7684\uff0c\u5982\u679c\u4f60\u8981\u770b\u5230\u5c71\u7684\u540e\u9762\uff0c\u4f60\u5c31\u8981\u722c\u5230\u5c71\u7684\u540e\u9762\u8fdb\u884c\u89c2\u770b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7269\u4f53\uff08\u5c71\uff09\u4e0d\u52a8\uff0c\u6444\u50cf\u673a\uff08\u4f60\u7684\u773c\u775b\uff09\u79fb\u52a8\u3002</p> <p>\u4f46\u662f\uff0c\u5728OpenGL\u7684\u4e16\u754c\u4e2d\uff0c\u662f\u76f8\u53cd\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u5750\u5728\u7535\u8111\u9762\u524d\u4e00\u52a8\u4e0d\u52a8\uff0c\u4f60\u9002\u5f53\u64cd\u4f5c\u9f20\u6807\u5c31\u53ef\u4ee5\u770b\u5230\u5c71\u7684\u540e\u9762\u3002\u5b9e\u9645\u4e0a\uff0c\u6444\u50cf\u673a\uff08\u4f60\u7684\u773c\u775b\uff09\u6ca1\u6709\u79fb\u52a8\uff0c\u800c\u7269\u4f53\uff08\u7535\u8111\u91cc\u7684\u5c71\uff09\u79fb\u52a8\u4e86\u3002</p> <p>\u56e0\u6b64\uff0c\u5728OpenGL\u4e2d\uff0c\u5b9e\u9645\u4e0a\u4e5f\u662f\u6ca1\u6709\u6444\u50cf\u673a\u8fd9\u4e2a\u6982\u5ff5\u7684\uff0c\u4f60\u6bcf\u6b21\u64cd\u4f5c\u9f20\u6807\uff0c\u6211\u4eec\u90fd\u662f\u5bf9\u9876\u70b9\u4f4d\u7f6e\u8fdb\u884c\u53d8\u6362\u7684\u3002</p> <p>\u800c\u6a21\u62df\u6444\u50cf\u673a\u79fb\u52a8\u65f6\uff0c\u5bf9\u9876\u70b9\u505a\u53d8\u6362\u7684\u77e9\u9635\uff0c\u5c31\u88ab\u79f0\u4e3a\u89c6\u56fe\u77e9\u9635\u3002</p>"},{"location":"1LearnChernoOpenGL/12%20%E6%A8%A1%E5%9E%8B%E3%80%81%E8%A7%86%E5%9B%BE%E7%9F%A9%E9%98%B5/#_3","title":"\u4ee3\u7801","text":"<pre><code>int main()\n{\nwindow = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\n//...\n{\n//\u9876\u70b9\u6570\u636e\nfloat positions[] = {\n//\u9876\u70b9\u4f4d\u7f6exy, UV\u5750\u6807xy\n100.0f, 100.0f, 0.0f, 0.0f, // 0\n200.0f, 100.0f, 1.0f, 0.0f, // 1\n200.0f, 200.0f, 1.0f, 1.0f, // 2\n100.0f, 200.0f, 0.0f, 1.0f  // 3\n};\n//...\n/* glm::ortho \u6b63\u4ea4\u77e9\u9635 */\n/* \u8fd9\u91cc\u5e94\u8be5\u662f 960x720 \u800c\u4e0d\u662f 960x540 \u7684\u5206\u8fa8\u7387 */\nglm::mat4 proj = glm::ortho(0.0f, 960.0f, 0.0f, 720.0f, -1.0f, 1.0f);\n/* \u76f8\u673a\u4f4d\u7f6e \u89c6\u56fe\u77e9\u9635 x&amp;y&amp;z */\nglm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(-100, 0, 0)); //\u5411\u5de6\u79fb\u52a8100\n/* \u6a21\u578b\u77e9\u9635 \u5bf9\u8c61\u4f4d\u7f6e */\nglm::mat4 model = glm::translate(glm::mat4(1.0f), glm::vec3(200, 200, 0)); //\u5c06\u6a21\u578b\u5411\u53f3\u79fb\u52a8200\uff0c\u5411\u4e0a\u79fb\u52a8200\nglm::mat4 mvp = proj * view * model; //\u5728OpenGL\u4e2d\uff0c\u662f \u77e9\u9635 * \u5411\u91cf\u3002\u56e0\u6b64\u987a\u5e8f\u662f\uff1a\u5411\u91cf = \u6295\u5f71\u77e9\u9635 * \u89c6\u56fe\u77e9\u9635 * \u6a21\u578b\u77e9\u9635 * \u5411\u91cf\nShader shader(\"res/shaders/Basic.shader\");\nshader.Bind();\nshader.SetUniform4f(\"u_Color\", 0.2f, 0.3f, 0.8f, 1.0f);\nshader.SetUniformMat4f(\"u_MVP\", mvp);\n//...\n}\n//...\n}\n</code></pre>"}]}